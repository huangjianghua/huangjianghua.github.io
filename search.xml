<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>手把手教你安装南方CASS系列</title>
      <link href="/2019/12/19/shou-ba-shou-jiao-ni-an-zhuang-nan-fang-cass9-x-xi-lie/"/>
      <url>/2019/12/19/shou-ba-shou-jiao-ni-an-zhuang-nan-fang-cass9-x-xi-lie/</url>
      
        <content type="html"><![CDATA[<h4 id="一、基本简介"><a href="#一、基本简介" class="headerlink" title="一、基本简介"></a>一、基本简介</h4><p><a href="http://o.southgis.com/download/init?typeId=98016ad8-dece-4992-a3f8-a37397763a60" target="_blank" rel="noopener">南方CASS官网</a><br>CASS 地形地籍成图软件，是由南方数码基于 AutoCAD 平台技术研发，具有完全知识产权的 GIS 前端数据处理系统。广泛应于地形成图、地籍成图、工程测量应用、空间数据建库和更新等领域。自CASS软件推出以来，软件销量超过18000套，市场占有率遥遥领先，已经成为业内应用最广、使用最方便快捷的软件品牌。也是用户量最大、升级最快、服务最好的主流成图和土石方计算软件系统。CASS软件经过十几年的稳定发展，市场和技术十分成熟，用户遍及全国各地，涵盖了测绘、国土、规划、房产、市政、环保、地质、交通、水利、电力、矿山及相关行业，得到了用户的一致好评。使用这款南方CASS完美版让你体验最专业的工程制图，如果您遇到了什么在工程制图方面的问题，使用南方CASS让你迎刃而解。</p><h4 id="二、CASS版本与CAD版本支持情况"><a href="#二、CASS版本与CAD版本支持情况" class="headerlink" title="二、CASS版本与CAD版本支持情况"></a>二、CASS版本与CAD版本支持情况</h4><blockquote><p>南方CASS7.0/7.1支持CAD的版本有：AutoCAD2004、2005、2006</p></blockquote><blockquote><p>南方CASS9.0支持CAD的版本有：AutoCAD2004、2005、2006、2007、2008、2010</p></blockquote><blockquote><p>南方CASS9.1支持CAD的版本有：AutoCAD2004、2005、2006、2007、2008、2010、2012</p></blockquote><blockquote><p>南方CASS9.2支持CAD的版本有：AutoCAD2004、2005、2006、2007、2008、2010、2012、2014、2015</p></blockquote><blockquote><p>南方CASS10.0支持CAD的版本有：AutoCAD2010、2012、2014、2015、2016</p></blockquote><blockquote><p>南方CASS10.1.6支持CAD的版本有：AutoCAD2004、2005、2006、2007、2008、2010、2012、2014、2015、2016、2017、2018、2019(CASS10.1.6是编写该文章时最新的版本)</p></blockquote><h4 id="三、系统配置要求"><a href="#三、系统配置要求" class="headerlink" title="三、系统配置要求"></a>三、系统配置要求</h4><p>CASS9.2支持 32 位系统、64 位系统，下面分别对这两个系统的配置做简单<br>说明</p><ol><li><p>32 位系统要求：</p><p>操作系统：Microsoft® Windows® 10，Microsoft® Windows® 8/8.1，Microsoft<br>Windows 8/8.1 Pro，Microsoft Windows 8/8.1 Enterprise，Windows 7 Ultimate，<br>Professional，Home Premium; Windows Vista（SP1）; Windows XP（SP2 或更高版<br>本）<br>浏览器：Windows Internet Explorer 7.0 或更高版本<br>CPU：Windows Vista - 采用 SSE2 技术的 Intel Pentium 4 或 AMD Athlon Dual<br>Core，3.0 GHz 或更高版本; Windows XP - 具有 SSE2 技术的 Intel Pentium 4 或 AMD<br>Athlon Dual Core，1.6 GHz 或更高版本<br>内存：Windows Vista - 2 GB RAM，Windows XP - 2 GB RAM<br>显示分辨率：1024 x 768 显示，带 True Color<br>硬盘：1 GB 可用磁盘空间进行安装<br>指点设备：MS-Mouse 兼容</p></li><li><p>64 位系统要求：</p><p>操作系统：Microsoft® Windows® 10，Microsoft® Windows® 8/8.1，Microsoft<br>Windows 8/8.1 Pro，Microsoft Windows 8/8.1 Enterprise，Windows 7 Ultimate，<br>Professional，Home Premium; Windows Vista（SP1）; Windows XP（SP2 或更高版<br>本）<br>浏览器：Windows Internet Explorer 7.0 或更高版本<br>CPU 类型：AMD Athlon 64 或具有 SSE2 技术的 Opteron; 英特尔奔腾 4 或至强<br>英特尔 EM64T 支持和 SSE2 技术<br>内存：Windows Vista - 2 GB RAM，Windows XP - 2 GB RAM<br>显示分辨率：1024 x 768，带 True Color<br>硬盘：1.5 GB 可用磁盘空间用于安装<br>指点设备：MS-Mouse 兼容<br>媒体（CD ROM 与 DVD）</p></li></ol><h4 id="四、安装说明"><a href="#四、安装说明" class="headerlink" title="四、安装说明"></a>四、安装说明</h4><p><code>注：CASS是基于AutoCAD平台二次开发所以安装CASS前必须安装相对应兼容的AutoCAD版本，否则无法进行安装。</code><br>CASS 9.2 支持 AutoCAD2004-2015 平台，不过CASS9.2以下对Win10操作系统不够友好，CAD版本太高对CASS又不友好，对于Win10用户推荐安装 AutoCAD2007/2008版本，Win7及其他操作系统兼容性更好一些可以根据自己的情况安装以更好的使用 CASS的各个功能。</p><p><a href="链接：https://pan.baidu.com/s/1bVDImbEKoN53HBIEJLr-6Q">内含Cass9.0–9.2破解版安装包</a> 提取码：ivfu</p><blockquote><p>本文中的CASS9.2版本(32位）是配合Win10专业版(64位操作系统)+AutoCAD2007 版本为例，介绍 CASS9.2的安装步骤。</p></blockquote><blockquote><p>CAD的安装包及安装教程请看我分享的这篇<a href="https://huangjianghua.github.io/2019/01/02/ruan-jian-si-cang-fen-xiang/">软件私藏分享</a>里面有CAD2004-2020版本的破解版安装包,请你自行下载安装。</p></blockquote><ol><li>以管理员身份运行安装CASS9.2程序。</li></ol><img src="/medias/nfcass/nfcass1.jpg" width="60%"><ol start="2"><li>同意许可协议，并点击下一步按钮。</li></ol><img src="/medias/nfcass/nfcass2.jpg" width="60%"><ol start="3"><li>安装向导会自动检测本机电脑上已安装的 AutoCAD 版本，用户只需选择需要运行的AutoCAD 平台，并选择 CASS9.2 的安装路径，点击下一步按钮（本文以 AtuoCAD2007 为例，安装路径最好为默认路径，也可以更改路径不过要记得安装在哪个文件夹，这样卸载时能卸载干净。）我的已经安装过，所以系统会提醒更新或卸载。<code>注：如果提示无法检测到说明你的这个CASS版本不支持你所安装的CAD版本，所以为了节省时间安装前一定要查看CASS所兼容CAD的版本。</code></li></ol><img src="/medias/nfcass/nfcass3.jpg" width="60%"><ol start="4"><li>点击开始安装按钮进行安装。</li></ol><img src="/medias/nfcass/nfcass4.jpg" width="60%"><ol start="5"><li>提示驱动安装后直接点下一步即可。</li></ol><img src="/medias/nfcass/nfcass5.jpg" width="60%"><img src="/medias/nfcass/nfcass7.jpg" width="60%"><ol start="6"><li>安装完成后，点击安装完成按钮，退出 CASS9.2 安装向导。</li></ol><img src="/medias/nfcass/nfcass8.jpg" width="60%"><ol start="7"><li>开始破解，以下分别是破解流程。</li></ol><img src="/medias/nfcass/nfcass9.jpg" width="60%"><ol start="8"><li>破解文件必须安装到CASS所安装的目录。</li></ol><img src="/medias/nfcass/nfcass10.jpg" width="60%"><img src="/medias/nfcass/nfcass11.jpg" width="60%"><img src="/medias/nfcass/nfcass12.jpg" width="60%"><ol start="8"><li>安装完成后,以管理员身份打开CASS。</li></ol><p><img src="/medias/nfcass/nfcass13.jpg" alt="安装完成后，记得测试是否可用。"></p><p><img src="/medias/featureimages/012.jpg" alt="请记住我的名字：三叶雨"></p><h4 id="其他CASS版本的安装只需要将破解内容全部复制后替换您所安装CASS文件目录下Bin里面数据即可，CASS安装包中我都做了详细说明。如果本教程对你有用就关注我的博客，目前已在搭建微信公众号，干货会越来越多，希望您一直陪伴左右。"><a href="#其他CASS版本的安装只需要将破解内容全部复制后替换您所安装CASS文件目录下Bin里面数据即可，CASS安装包中我都做了详细说明。如果本教程对你有用就关注我的博客，目前已在搭建微信公众号，干货会越来越多，希望您一直陪伴左右。" class="headerlink" title="其他CASS版本的安装只需要将破解内容全部复制后替换您所安装CASS文件目录下Bin里面数据即可，CASS安装包中我都做了详细说明。如果本教程对你有用就关注我的博客，目前已在搭建微信公众号，干货会越来越多，希望您一直陪伴左右。"></a>其他CASS版本的安装只需要将破解内容全部复制后替换您所安装CASS文件目录下Bin里面数据即可，CASS安装包中我都做了详细说明。如果本教程对你有用就关注我的博客，目前已在搭建微信公众号，干货会越来越多，希望您一直陪伴左右。</h4><hr><p><code>郑重声明：软件资源全部收集来源于互联网，所提供下载链接也是站外链接，网站本身并不存储相关资源文件，版权归著作人和出版社所有。本站仅提供一个观摩学习的环境，将不对任何资源负法律责任。如果侵犯了您的权利，请及时发送邮件到“<a href="mailto:2446875775@qq.com" target="_blank" rel="noopener">2446875775@qq.com</a>”，我会第一时间进行改正或删除处理，保证您的权利！站内所有资源仅供学习与参考，请勿用于商业用途，并请于下载后24小时内删除，否则产生的一切后果将由您自己承担！</code></p><p>　　</p>]]></content>
      
      
      <categories>
          
          <category> CASS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CASS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>度分秒与数值间的相互转换</title>
      <link href="/2019/12/07/du-fen-miao-yu-shu-zhi-jian-de-xiang-hu-zhuan-huan/"/>
      <url>/2019/12/07/du-fen-miao-yu-shu-zhi-jian-de-xiang-hu-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<p>经过一段时间的学习后发现度分秒与数值之间的转换是现实生活中需要必备的一项小技能，尤其是学测绘学的你大部分时间你都会接触到像全站仪等仪器那么你就会和度分秒分不开了，今天我们不说web就讲讲度分秒与数值之间的相互转换吧。</p><img src="/medias/dfm/biaoqb.jpg" width="50%"><h5 id="看完本篇后你将会把度分秒与数值之间的换算彻底熟练起来。"><a href="#看完本篇后你将会把度分秒与数值之间的换算彻底熟练起来。" class="headerlink" title="看完本篇后你将会把度分秒与数值之间的换算彻底熟练起来。"></a>看完本篇后你将会把度分秒与数值之间的换算彻底熟练起来。</h5><p><em>会用到的函数有：</em></p><blockquote><p><strong>Excel中的函数有</strong>：</p></blockquote><ol><li><strong>RADIANS()</strong> 表示角度化为弧度。</li><li><strong>TEXT()</strong>  把数值格式转换为文本格式。</li><li><strong>INT()</strong> 向下取整。</li><li><strong>LEFT()</strong>  从字符串第一个返回指定个数的字符。</li><li><strong>MID()</strong>  从字符串中指定位置起始位置起返回一个指定长度的字符。</li><li><strong>FIND()</strong>  返回一个字符串在另一个字符串中出现的起始位置(区分大小写)。</li></ol><blockquote><p><strong>JS中的函数</strong></p></blockquote><ol start="7"><li><strong>Math.abs(x)</strong> 可返回数的绝对值。</li><li><strong>Math.floor(x)</strong> 可对一个数进行下舍入，方法执行的是向下取整计算，它返回的是小于或等于函数参数，并且与之最接近的整数。</li><li><strong>Math.round(x)</strong> 可把一个数字舍入为最接近的整数，例如，3.5 将舍入为 4，而 -3.5 将舍入为 -3。</li><li><strong>split()</strong> 用于把一个字符串分割成字符串数组，例如，”2:3:4:5”.split(“:”)      //将返回[“2”, “3”, “4”, “5”]。</li></ol><h4 id="一、数值转度分秒"><a href="#一、数值转度分秒" class="headerlink" title="一、数值转度分秒"></a>一、数值转度分秒</h4><blockquote><p>将数值转换为度分秒根据输入方法的不同分为以下几种方法：</p></blockquote><p><strong>1. 利用Excel中自定义规则</strong> <code>[h]°mm′ss.00″</code>  </p><blockquote><p>这种方法是根据Excel表中设置单元格格式→数字→自定义属性中设定自己需要的规则如下图所示：</p></blockquote><p><img src="/medias/dfm/%E5%BA%A6%E5%88%86%E7%A7%921.png" alt="自定义规则"></p><blockquote><p>这种根据日期设置的规则输入时也要遵循一定的规则如下图所示的输入方式：</p></blockquote><p><img src="/medias/dfm/%E5%BA%A6%E5%88%86%E7%A7%922.png" alt="输入规则"></p><blockquote><p>其实它的真面目是这样的</p></blockquote><p><img src="/medias/dfm/%E5%BA%A6%E5%88%86%E7%A7%923.png" alt="真面目"></p><blockquote><p>所以这种方法的优缺点很明显只可以单纯的进行相加减不可以进行乘除而且精度也不怎么高，输入时也较为麻烦，而且表格不可以拖拉求值所以我不推荐这种方法。</p></blockquote><hr><p><strong>2. 在Excel表格中编公式</strong></p><ul><li>低精度方法</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">=</span><span class="token function">TEXT</span><span class="token punctuation">(</span>要转化的数值<span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">"[h]°m′sss.000″"</span><span class="token punctuation">)</span></code></pre><blockquote><p>转化结果如下图</p></blockquote><p><img src="/medias/dfm/%E5%BA%A6%E5%88%86%E7%A7%924.png" alt="编公式"></p><ul><li>高精度方法</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">=</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token function">INT</span><span class="token punctuation">(</span>XX<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"°"</span><span class="token operator">&amp;</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token function">INT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>XX<span class="token operator">-</span><span class="token function">INT</span><span class="token punctuation">(</span>XX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"′"</span><span class="token operator">&amp;</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>XX<span class="token operator">-</span><span class="token function">INT</span><span class="token punctuation">(</span>XX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">-</span><span class="token function">INT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>XX<span class="token operator">-</span><span class="token function">INT</span><span class="token punctuation">(</span>XX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"00.0000"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">""</span><span class="token string">""</span><span class="token comment" spellcheck="true">//XX表示要转化的数值</span></code></pre><blockquote><p>转化后的结果如下图</p></blockquote><p><img src="/medias/dfm/%E5%BA%A6%E5%88%86%E7%A7%925.png" alt="转换结果"></p><blockquote><p>这种方法我认为是比较不错的方法转化精度高，而且表格可以拖拉求值提高了工作效率。</p></blockquote><p><code>注：以上的 数值转度后，转化后的度分秒不可以直接用来相加减那怎么样才可以相加减呢？且看下面讲解</code></p><hr><h4 id="二、度分秒转数值"><a href="#二、度分秒转数值" class="headerlink" title="二、度分秒转数值"></a>二、度分秒转数值</h4><p>度分秒转数值是很简单的，但是我们要弄懂其中的来龙去脉，来我们先回顾一下当年学的知识点。</p><p><img src="/medias/dfm/%E5%BC%A7%E5%BA%A6.png" alt="弧度"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//我们知道：</span><span class="token number">1</span>°<span class="token operator">=</span><span class="token number">60</span>′，<span class="token number">1</span>′<span class="token operator">=</span><span class="token number">60</span>″ ，<span class="token number">1</span>°<span class="token operator">=</span><span class="token number">3600</span>″。<span class="token comment" spellcheck="true">//在Unicode 代码中</span>度的符号对应的 Unicode 代码为：00B0 （六十进制），显示为°。分的符号对应的 Unicode 代码为：<span class="token number">2032</span> （六十进制），显示为′。秒的符号对应的 Unicode 代码为：<span class="token number">2033</span> （六十进制），显示为″。<span class="token comment" spellcheck="true">//角度与弧度的关系：</span><span class="token number">1</span>弧度<span class="token operator">=</span><span class="token number">180</span><span class="token operator">/</span>π 度<span class="token number">1</span>度<span class="token operator">=</span>π<span class="token operator">/</span><span class="token number">180</span> 弧度<span class="token number">1</span>弧度等于<span class="token number">57.3</span>度，<span class="token number">1</span>弧度等于<span class="token number">60</span>弧分，<span class="token number">1</span>弧分等于<span class="token number">60</span>弧秒，所以<span class="token number">1</span>弧秒就是<span class="token number">3600</span>分之一弧度，就是<span class="token number">0.01592</span>度。因为：角度<span class="token number">180</span>°<span class="token operator">=</span>π弧度所以：<span class="token number">1</span>弧度<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token operator">/</span>π<span class="token punctuation">)</span>°角度<span class="token number">1</span>角度<span class="token operator">=</span>π<span class="token operator">/</span><span class="token number">180</span>弧度</code></pre><blockquote><p>有了以上的知识点那么我们就可以开始了。</p></blockquote><p><strong>1. 利用公式</strong></p><blockquote><p>这种是最简单的方法，适用于 <code>度分秒都是分开这种表格</code>，如下图。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//单纯的角度转数值:</span><span class="token operator">=</span><span class="token punctuation">(</span>度°<span class="token operator">+</span>分′<span class="token operator">/</span><span class="token number">60</span><span class="token operator">+</span>秒″<span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//角度转数值再转弧度：这里要用到RADIANS()函数</span><span class="token operator">=</span><span class="token function">RADIANS</span><span class="token punctuation">(</span>度°<span class="token operator">+</span>分′<span class="token operator">/</span><span class="token number">60</span><span class="token operator">+</span>秒″<span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">)</span></code></pre><p><img src="/medias/dfm/%E5%BA%A6%E5%88%86%E7%A7%926.png" alt="转化后"></p><hr><p><strong>2. 也是利用公式</strong></p><blockquote><p>这种方法公式有点复杂但是它可以把一个度分秒直接转换为数值，非常的方便。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//单纯的角度转数值:</span><span class="token operator">=</span><span class="token function">LEFT</span><span class="token punctuation">(</span><span class="token number">523</span><span class="token punctuation">,</span><span class="token function">FIND</span><span class="token punctuation">(</span><span class="token string">"°"</span><span class="token punctuation">,</span><span class="token number">523</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">MID</span><span class="token punctuation">(</span><span class="token number">523</span><span class="token punctuation">,</span><span class="token function">FIND</span><span class="token punctuation">(</span><span class="token string">"°"</span><span class="token punctuation">,</span><span class="token number">523</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">+</span><span class="token function">MID</span><span class="token punctuation">(</span><span class="token number">523</span><span class="token punctuation">,</span><span class="token function">FIND</span><span class="token punctuation">(</span><span class="token string">"′"</span><span class="token punctuation">,</span><span class="token number">523</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">LEN</span><span class="token punctuation">(</span><span class="token number">523</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">FIND</span><span class="token punctuation">(</span><span class="token string">"′"</span><span class="token punctuation">,</span><span class="token number">523</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3600</span>  <span class="token comment" spellcheck="true">//其中523表示你要输入的度分秒</span><span class="token comment" spellcheck="true">//角度转数值再转弧度：这里要用到RADIANS()函数</span><span class="token operator">=</span><span class="token function">RADIANS</span><span class="token punctuation">(</span><span class="token function">LEFT</span><span class="token punctuation">(</span><span class="token number">523</span><span class="token punctuation">,</span><span class="token function">FIND</span><span class="token punctuation">(</span><span class="token string">"°"</span><span class="token punctuation">,</span><span class="token number">523</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">MID</span><span class="token punctuation">(</span><span class="token number">523</span><span class="token punctuation">,</span><span class="token function">FIND</span><span class="token punctuation">(</span><span class="token string">"°"</span><span class="token punctuation">,</span><span class="token number">523</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">+</span><span class="token function">MID</span><span class="token punctuation">(</span><span class="token number">523</span><span class="token punctuation">,</span><span class="token function">FIND</span><span class="token punctuation">(</span><span class="token string">"′"</span><span class="token punctuation">,</span><span class="token number">523</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">LEN</span><span class="token punctuation">(</span><span class="token number">523</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">FIND</span><span class="token punctuation">(</span><span class="token string">"′"</span><span class="token punctuation">,</span><span class="token number">523</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//其中523表示你要输入的度分秒</span></code></pre><blockquote><p>转换结果如下图</p></blockquote><p><img src="/medias/dfm/%E5%BA%A6%E5%88%86%E7%A7%927.png" alt="转化结果"></p><p><strong>下图是转换后用前两者方法的结果进行对比，我们发现两者的转换结果一致只是表格的编制不同，至于要用什么方法这个取决于大家的实际情况。</strong></p><p><img src="/medias/dfm/%E5%BA%A6%E5%88%86%E7%A7%928.png" alt="两者转化结果对比"></p><h4 id="三、用JS代码实现"><a href="#三、用JS代码实现" class="headerlink" title="三、用JS代码实现"></a>三、用JS代码实现</h4><blockquote><p>但用JS实现会造成一定的精度损失，因为我们看到的数值是计算机用二进制转换为我们可以识别的十进制，这其中的相互转换会造成精度丢失，当然这个精度损失是可以通过代码的优化来进行实现的，以下只是一个简单实现。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">degturnDs</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数值度转度分秒</span>        value <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> du <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//度</span>        <span class="token keyword">var</span> fen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">-</span> du<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分</span>        <span class="token keyword">var</span> miao <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">-</span> du<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//秒</span>        <span class="token keyword">return</span> du <span class="token operator">+</span> <span class="token string">'°'</span> <span class="token operator">+</span> fen <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> miao <span class="token operator">+</span> <span class="token string">'"'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">dsturnDeg</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">////度分秒转数值度</span>        <span class="token keyword">var</span> du <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"°"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//度</span>        <span class="token keyword">var</span> fen <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"°"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分</span>        <span class="token keyword">var</span> miao <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"°"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//秒</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>du<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>fen<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>miao<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">degturnDs</span><span class="token punctuation">(</span><span class="token number">24.88764</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//24°53'16"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dsturnDeg</span><span class="token punctuation">(</span><span class="token number">24</span>°<span class="token number">53</span>'<span class="token number">16</span>"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//24.88764</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="以上就是要说的一些方法，这也是我常用的一些方法，如果要更快的计算角度我觉得这些是必须要掌握的方法，当然了如果你有更好的转化方法也可以发至我的邮箱我们方便交流2446875775-qq-com。"><a href="#以上就是要说的一些方法，这也是我常用的一些方法，如果要更快的计算角度我觉得这些是必须要掌握的方法，当然了如果你有更好的转化方法也可以发至我的邮箱我们方便交流2446875775-qq-com。" class="headerlink" title="以上就是要说的一些方法，这也是我常用的一些方法，如果要更快的计算角度我觉得这些是必须要掌握的方法，当然了如果你有更好的转化方法也可以发至我的邮箱我们方便交流2446875775@qq.com。"></a>以上就是要说的一些方法，这也是我常用的一些方法，如果要更快的计算角度我觉得这些是必须要掌握的方法，当然了如果你有更好的转化方法也可以发至我的邮箱我们方便交流<code><a href="mailto:2446875775@qq.com" target="_blank" rel="noopener">2446875775@qq.com</a></code>。</h5>]]></content>
      
      
      <categories>
          
          <category> 度分秒 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 度分秒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Demo</title>
      <link href="/2019/09/03/qian-duan-xiao-xiang-mu/"/>
      <url>/2019/09/03/qian-duan-xiao-xiang-mu/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">DEMO名称</th><th align="center">技术栈</th><th align="center">说明</th><th align="center">平台</th></tr></thead><tbody><tr><td align="center"><a href="http://yu.huangjianghua.com" target="_blank" rel="noopener">在线阅读电子书(未完成)</a></td><td align="center">html5、css3、javascript、vuejs、nodejs、epubjs</td><td align="center">由于服务器内存太小加载可能会有点慢…</td><td align="center">移动端</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web全栈技术栈</title>
      <link href="/2019/09/03/web-quan-zhan-ji-zhu-zhan/"/>
      <url>/2019/09/03/web-quan-zhan-ji-zhu-zhan/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/banner/12.jpg" alt="请珍惜好在地球上的每一天。"></p><h5 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML/CSS"></a>HTML/CSS</h5><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"><a href="https://www.w3school.com.cn/tags/index.asp" target="_blank" rel="noopener">HTML</a>即超文本标记语言（Hyper Text Markup Language）</td><td align="center"><a href="https://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="noopener">CSS</a>层叠样式表（Cascading StyleSheet）</td></tr><tr><td align="center"><a href="https://www.w3school.com.cn/tags/index.asp" target="_blank" rel="noopener">HTML5</a>HTML5 是下一代 HTML 标准</td><td align="center"><a href="https://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="noopener">CSS3</a>是CSS技术的升级版本</td></tr><tr><td align="center"><a href="https://www.bootcss.com/" target="_blank" rel="noopener">Bootstrap3</a>Bootstrap，来自 Twitter，是目前最受欢迎的前端框架</td><td align="center"><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">FontAwesome</a>Font Awesome 是一套绝佳的图标字体库和CSS框架。</td></tr><tr><td align="center"><a href="https://v4.bootcss.com/docs/4.3/getting-started/download/" target="_blank" rel="noopener">Bootstrap4</a>目前是 Bootstrap 的最新版本</td><td align="center"><a href="https://www.runoob.com/foundation/foundation-tutorial.html" target="_blank" rel="noopener">Foundation</a>用于开发响应式的 HTML, CSS and JavaScript 框架</td></tr></tbody></table><h5 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h5><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">javaScript</a>是Web的编程语言</td><td align="center"><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">jQuery</a>是一个 JavaScript 库</td></tr><tr><td align="center"><a href="https://angular.io/" target="_blank" rel="noopener">AngularJS</a>一套框架，多种平台移动端&amp;桌面端.</td><td align="center"><a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>是一套构建用户界面的渐进式框架.</td></tr><tr><td align="center"><a href="https://www.reactjscn.com/" target="_blank" rel="noopener">Ract</a>是一个用于构建用户界面的 JAVASCRIPT库</td><td align="center"><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a>是 JavaScript 的一个超集，支持 ECMAScript 6 标准</td></tr></tbody></table><h5 id="CSS编译器-扩展语言"><a href="#CSS编译器-扩展语言" class="headerlink" title="CSS编译器/扩展语言"></a>CSS编译器/扩展语言</h5><table><thead><tr><th align="center"></th></tr></thead><tbody><tr><td align="center"><a href="https://www.sass.hk/" target="_blank" rel="noopener">Sass</a>世界上最成熟、最稳定、最强大的专业级CSS扩展语言！</td></tr><tr><td align="center"><a href="https://www.bootcss.com/p/lesscss/#-variables" target="_blank" rel="noopener">Less</a>LESS 将 CSS 赋予了动态语言的特性，如 变量， 继承， 运算， 函数</td></tr><tr><td align="center"><a href="http://stylus-lang.com/" target="_blank" rel="noopener">Stylus</a>是一个CSS的预处理框架</td></tr><tr><td align="center"><a href="https://www.zhangxinxu.com/jq/stylus/" target="_blank" rel="noopener">Stylus</a>张鑫旭中文翻译</td></tr></tbody></table><h5 id="开发必备工具"><a href="#开发必备工具" class="headerlink" title="开发必备工具"></a>开发必备工具</h5><table><thead><tr><th align="center"></th></tr></thead><tbody><tr><td align="center"><a href="https://www.webpackjs.com/" target="_blank" rel="noopener">Webpack</a>是一个现代JavaScript 应用程序的静态模块打包神器(module bundler)</td></tr><tr><td align="center"><a href="https://www.babeljs.cn/" target="_blank" rel="noopener">Babel</a>是一个 JavaScript 编译器。</td></tr><tr><td align="center"><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>代码上传工具</td></tr><tr><td align="center"><a href="https://github.com" target="_blank" rel="noopener">Github</a>代码管理工具</td></tr></tbody></table><h5 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h5><table><thead><tr><th align="center"></th></tr></thead><tbody><tr><td align="center"><a href="https://www.runoob.com/w3cnote/android-tutorial-intro.html" target="_blank" rel="noopener">Android</a>是一种基于Linux的自由及开放源代码的操作系统，主要使用于移动设备</td></tr><tr><td align="center"><a href="https://www.runoob.com/swift/swift-tutorial.html" target="_blank" rel="noopener">Swift</a>是一种支持多编程范式和编译式的编程语言,用于开发 iOS，OS X 和 watchOS应用程序。</td></tr><tr><td align="center"><a href="https://www.w3school.com.cn/jquerymobile/index.asp" target="_blank" rel="noopener">jQueryMobile</a>是jQuery 在手机上和平板设备上的版本</td></tr><tr><td align="center"><a href="https://www.runoob.com/ionic/ionic-tutorial.html" target="_blank" rel="noopener">ionicionic</a>是一个强大的 HTML5 应用程序开发框架HTML5 Hybrid Mobile AppFramework</td></tr><tr><td align="center"><a href="https://www.runoob.com/kotlin/kotlin-tutorial.html" target="_blank" rel="noopener">Kotlin</a>在 Java 虚拟机上运行的静态类型编程语言，Android 官方开发语言</td></tr></tbody></table><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"><a href="https://www.runoob.com/php/php-tutorial.html" target="_blank" rel="noopener">PHP</a>是一种创建动态交互性站点的强有力的服务器端脚本语言,俗称世界上最好的语言。</td><td align="center"><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">Nodejs</a>Node.js 是运行在服务端的 JavaScript.</td></tr><tr><td align="center"><a href="https://www.runoob.com/jsp/jsp-tutorial.html" target="_blank" rel="noopener">JSP</a>JSP与PHP、ASP、ASP.NET等语言类似，运行在服务端的语言</td><td align="center"><a href="https://www.runoob.com/asp/asp-tutorial.html" target="_blank" rel="noopener">ASP</a>（Active Server Pages 动态服务器页面）是一种生成动态交互性网页的强有力工具</td></tr><tr><td align="center"><a href="https://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noopener">Java</a>一种可以撰写跨平台应用软件的面向对象的高级程序设计语言</td><td align="center"><a href="https://www.runoob.com/python/python-tutorial.html" target="_blank" rel="noopener">Python</a>是一种解释型、面向对象、动态数据类型的高级程序设计语言。</td></tr><tr><td align="center"><a href="http://c.biancheng.net/golang/" target="_blank" rel="noopener">GO</a>语言是谷歌推出的一种全新的编程语言</td><td align="center"></td></tr></tbody></table><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"><a href="https://www.runoob.com/sql/sql-tutorial.html" target="_blank" rel="noopener">SQL</a>结构化查询语言(Structured Query Language)</td><td align="center"><a href="https://www.mongodb.com/" target="_blank" rel="noopener">MongoDB</a>是目前在IT行业非常流行的一种非关系型数据库(NoSql)</td></tr><tr><td align="center"><a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">Mysql</a>是一个关系型数据库管理系统</td><td align="center"><a href="https://www.runoob.com/Memcached/Memcached-tutorial.html" target="_blank" rel="noopener">Memcached</a>是一个自由开源的，高性能，分布式内存对象缓存系统。</td></tr></tbody></table><p><img src="/medias/banner/16.jpg" alt="生活乐在分享，极客改变世界。"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web全栈技术栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最美的句子</title>
      <link href="/2019/07/25/zui-mei-de-ju-zi/"/>
      <url>/2019/07/25/zui-mei-de-ju-zi/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/banner/61.jpg" alt></p><p>1.人的一生是万里河山，来往无数过客。有人给山河添色，有人使日月无光，有人改他江流，有人塑他梁骨。大限到时，不过是立在山巅，江河回望。  ——尾鱼大大</p><p>2.我什么都没有忘，只是有些事只适合收藏，不能说，不能想，却也不能忘。  ——史铁生</p><p>3.宁山间碎骨，沉河不浮，不愿守棺而驻，灵魂碌碌。</p><p>4.花开如火，也如寂寞。    ——顾城</p><p>5.岁月不饶人，我亦未曾饶过岁月。    ——木心</p><p>6.但屈指西风几时来，又不道流年暗中偷换。    ——苏轼</p><p>7.历经万般红尘劫，犹如凉风轻拂面。    ——林清玄</p><p>8.眼看他起朱楼，眼看他宴宾客，眼看他楼塌了。    ——孔尚任</p><p>9.你来人间一趟，你要看看太阳。    ——海子</p><p>10.一旦喜欢上谁就别无所求，只要每天能见到他就已经觉得很庆幸，一辈子很短，如白驹过隙，转瞬即逝。可这种心情很长，如高山大川，绵延不绝。  ——《武林外传》</p><p>11.你问人问题，她若答非所问，便已是答了，无需再问。    ——木心</p><p>12.人与人之间的缘分本就稀薄寡淡，像是一本书中提到过的——旅途中遇到的人多是清尘浊水，后会无期。</p><p>13.其实真正的送别，没有长亭古道，没有劝君更尽一杯酒，就是在一个和平时一样的清晨，有的人留在昨天了。    ——《克斯维尔的明天》</p><p>14.心之何如，有似万丈迷津，横亘千里，其中并无舟子可以渡人，除了自渡，他人爱莫能助。        ——三毛</p><p>15.人之所以孤独，是因为要和某个人相遇。</p><p>16.佛曰：人生八苦，生、老、病、死，爱憎恨，怨别离，放不下，求不得。</p><p>17.把酒祝东风，且共从容。    ——欧阳修</p><p>18.最可怕的是你庸庸碌碌过一生，还骗自己平淡才是真。</p><p>19.今天早上，我坐在窗口，世界像一个过客，在窗口暂停片刻，朝我点点头就走了。        ——泰戈尔</p><p>20.若我见到你，事隔经年，我该如何和你打招呼，以眼泪，以沉默。    ——拜伦</p><p>21.回忆是个大祭司，杀了现在，用现在的心去祭祀那逝去的往昔之神龛。</p><p>22.没有你的地方都是他乡，没有你的旅途都是流浪。</p><p>23.我怎敢倒下，我身后无一人。</p><p>24.山河壮丽，不值一提。</p><p>25.后来我才知道，它不是我的花，我只是途径了她的绽放。</p><p>26.下次轮回愿相见不识。</p><p>27.我们都是戏子，在别人的故事里，流着自己的眼泪。</p><p>28.要么忙着活，要么忙着死。      ——《肖申克的救赎》</p><p>29.我们笑着说再见，却深知再见遥遥无期。      ——《海上钢琴师》</p><p>30.每个人都会死去，但并不是每个人都真正活过。</p><p>31.玻璃晴朗，橘子辉煌。        ——北岛《过节》</p><p>32.凌晨四点钟，看到海棠花未眠。      ——川端康成</p><p>33.人生碌碌，竞短论长，却不道荣枯有数，得失难量。    ——沈复《浮生六记》</p><p>34年轻时你做了一个决定，要把生命献给爱情，后来你没有死，年轻替你抵了命。</p><p>35两袖一挥，清风明月，仰天一笑，快意人生，步履一双，山河踏遍，心有明月，山河明媚。    ——林清玄</p><p>36终南有坟，名不老。</p><p>37我曾踏月而来，只因你在山中。  ——席慕蓉</p><p>38从童年起，我便独自一人照顾着历代的星辰。    ——白鹤林</p><p>39.酒入愁肠，七分酿成月光，余下三分啸成剑气，绣口一吐就是半个盛唐。    ——余光中</p><p>40.我的余光中都是你。    ——余光中</p><p>41.如果快乐太难，那么祝你平安。    ——八月长安</p><p>42.我燃烧一颗恒星向你说再见。    ——《神秘博士》</p><p>43.有些人不属于自己，但是遇见了也弥足珍贵。    ——青山刚则</p><p>44.车站有两个地方最感人，入口和出口。一个是不想让你走，一个是等你回来。  ——李宫俊</p><p>45.我怕君心易变，浮生若梦。  ——《游园惊梦》</p><p>46.总之岁月漫长，然而值得等待。      ——村上春树</p><p>47.故事的开头总是这样，适逢其会，猝不及防，故事的结尾总是这样，花开两朵，天各一方。      ——张嘉佳</p><p>48.那时人们都期盼反抗压迫，大圣就是踏破凌霄，破除束缚的英雄。而我所崇拜的孙悟空，扪心自问，是我们自己的渴望和倒影，是这个时代年轻人的缩影，热烈而悲哀。大概我们都想做妖吧，最终有的人成佛，有的人被风沙淹没在西行路上。  ——《悟空传》</p><p>49.天可补，海可填，南山可移，日月既往，不可复追。    ——曾国藩</p><p>50.卿当日胜贵，吾独向黄泉。    ——《孔雀东南飞》</p><p>51.死亡不是失去生命，而是走出时间。    ——余华</p><p>52爸爸也是第一次当爸爸，很多地方做的不好，你要原谅。    ——《请回答1998》</p><p>53.醉过才知酒浓，爱过才知情重。你不能做我的诗，正如我不能做你的梦。  ——胡适</p><p>54.一个笑就击败了一辈子，一滴泪就还清了一个人。一人花开，一人花落，这些年从头到尾，无人问询。    ——顾漫</p><p>55.人在无端微笑时，不是百无聊赖，就是痛苦难当。  ——王小波</p><p>56.关山难越，谁悲失路之人？萍水相逢，尽是他乡之客。    ——《滕王阁序》</p><p>57.我亦飘零久，十年来，深恩负尽，死生师友。    ——顾贞观</p><p>58.倘若天下安乐，我等愿渔樵耕读，江湖浪迹。倘若盛世将倾，深渊在侧，我辈当万死以付。    ——《杀破狼》</p><p>59.不愿清醒，宁愿一直沉迷放纵。不知归路，宁愿一世无悔追逐。    ——王小波</p><p>60.故人笑比中庭树，一日秋风一日疏。    ——《将饮茶》</p><p>61.放他三千裘马去，不寄俗生。唯贪我三枕黄粱梦。    ——《江海共余生》</p><p>62.万头攒动，火树银花之处不必找我。    ——木心</p><p>63.太平年间，他有花草，有诗歌，有茶酒，亡了国，他有牺牲和死亡，他很满意自己的遭遇。      ——老舍</p><p>64.世间的日子正是这么的暗淡与鲜亮，交叠轮回。    ——钱红莉</p><p>65.看海看久了想见人，见人见多了想看海。    ——村上春树</p><p>66.我只身前行，却仿佛带着一万雄兵。    ——玛雅·安吉洛</p><p>67.冥鸿天际，生事分付一轻芒。    ——叶梦得</p><p>68.吾若万里长江，何能不千里一曲。    ——《世说新语》</p><p>69.你看一晃两三年，匆匆又夏天。    ——莫小巧</p><p>70.风也萧萧，雨也萧萧，瘦尽灯花又一宵。    ——纳兰性德</p><p>71.我见君来，顿觉吾庐，溪山美哉。    ——辛弃疾</p><p>72.人生不过是午后到黄昏的距离，茶凉言尽，月上柳梢。    ——徐志摩</p><p>73.我们活过的那刹那，前后皆是暗夜。    ——费尔南多·佩索阿</p><p>74.世界微尘里，吾宁爱与憎。  ——李商隐</p><p>75.江山风月，本无常主，闲者便是主人。  ——苏轼</p><p>76.伤心莫唱，南朝旧曲，司马泪痕多。  ——杨果</p><p>77.青泥小剑关，红叶湓江岸，白草连云栈，功名半纸，风雪千山。  ——张可久</p><p>78.我所有的自负都来自于我的自卑，所有的英雄气概都来自于我内心的软弱，所有的振振有词都因为心中满是怀疑。我假装无情，其实是痛恨自己的深情，我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到愿意驻足的地方。    ——马良</p><p>79.佛门自清净，我非寡欲人，喝酒，吃肉，动嗔痴，生爱恨。</p><p>80.祝你所求皆如愿，所行化坦途，多喜乐，长安宁。</p><p>81.岁月不堪数，故人不如初。</p><p>82.饮鸠止渴，乌啼月落，梧桐灯前望星河，世间情事是皆罪过。    ——槐奚</p><p>83.世间上之所以有这么多条条框框，就是为了告诉你不必格格都入。</p><p>84.你没有如期归来，而这正是离别的意义。      ——北岛</p><p>85.这一生本就是各自下雪，各人有各人的隐晦和皎洁。</p><p>86.我是人间惆怅客，知君何事泪纵横，断肠声里忆平生。    ——纳兰容若</p><p>87.我们都喜欢光，虽然转瞬即逝，但你还是你，有我一喊就颤心的名字。    ——余秀华</p><p>88.我们听过无数的道理，却仍旧过不好这一生。  ——韩寒</p><p>89.在座皆算老友，碗底便是天涯。        ——《不谓侠》</p><p>90.你是我的可遇不可求，可遇不可留，可遇不可有。  ——李宫俊</p><p>91.我假装无所谓，却发现你是真的不在乎。  ——李宫俊</p><p>92.乍见之欢，一相逢，金风玉露。久处不厌，暖浮生，天下无双。</p><p>93.岁月悠长，山河无恙，但你我都不再复当年模样。</p><p>94.我喝过很烈的酒，也放过不该放的手，从前不会回头，往后不会将就。  ——《雪中悍刀行》</p><p>95.生命中曾拥有过的所有灿烂，终究都需要用寂寞偿还。      ——马尔克斯</p><p>96.这世间悲伤分两种，一种天地间放声大笑，一种世事间不闻不问，我是后者。你走的时候我什么都没说，不是无情木头，只有你能懂。我克制悲伤，我有多悲伤。    ——傅众生</p><p>97.我们最终都要远行，最终都要与稚嫩的自己告别，告别是通向成长的苦行之路。  ——海子</p><p>98.人们在谈论有朝一日的时候，其真正的意思是永不。    ——《西部世界》</p><p>99.从此星河浩渺，再无音讯。</p><p>100.从此山水不相逢，不闻旧人长与短。</p><p>101.为你，千千万万遍。    ——《追风筝的人》</p><p>102.我们把世界拿在手里，就是为了一样样放好。    ——顾城</p><p>103.每一个不曾起舞的日子，都是对生命的辜负。    ——尼采</p><p>104.我不介意一直孤独，我只是不想变得微不足道。    ——《了不起的麦瑟尔夫人》</p><p>105.欢迎来到现实世界，它糟糕的要命，但你会爱上它的。  ——《老友记》</p><p>106.世人谓我恋长安，其实只恋长安某。    ——殊同</p><p>107.埋骨何须桑梓地，人生无处不青山。    ——毛泽东</p><p>108.我夜坐听风，昼眠听雨。悟得月如何缺，天如何老。    ——戴望舒</p><p>109.小舟从此逝，江海寄余生。</p><p>110.别为了那些不属于你的观众，去演绎你不擅长的人生。</p><p>111.突然有一天，发现母亲老了，扶着墙走，已踩不出声音。</p><p>112.人生不过如此，且行且珍惜。  ——林语堂</p><p>113.人永远不会知道，谁哪次不经意的跟你说了再见之后，就真的不会见了。    ——《千与千寻》</p><p>114.而或长烟一空，皓月千里，浮光跃金，静影沉璧，渔歌互答，此乐何极！  ——范仲淹</p><p>115.这个世界很温柔，但她不喜欢我。    ——江南</p><p>116.面具戴太久，就会长到脸上，再想揭下来，除非伤筋动骨扒皮。  ——鲁迅</p><p>117.中秋谁与共孤光，把盏凄然北望。    ——苏轼</p><p>118.许多念念不忘，只是一瞬，许多一瞬，却是念念不忘。    ——许嵩</p><p>119.我喜欢我望向别处时，他落在我身上的目光。</p><p>120.从他的眉眼寄来的一场落雨，我等在悸动的湖海之畔，看人间四季。</p><p>121.小时候真傻，居然盼着长大。    ——丰子恺</p><p>122.睡在哪里都是睡在夜里。    ——贾平凹</p><p>123.躲了一辈子雨，雨会不会很伤心。    ——走饭</p><p>124.坠欢莫拾，酒痕在衣。    ——李叔同</p><p>125.家人闲坐，灯火可亲。  ——汪曾祺</p><p>126.大闹一场，悄然离去。  ——金庸</p><p>127.若人间有情，那是开始，也是尽头。    ——北岛</p><p>128.秋天的风都是从往年吹来的。    ——木心</p><p>129.雨中山果落，灯下草虫鸣。    ——王维</p><p>130.在黄昏靠岸，码头格外悲伤。  ——聂鲁达</p><p>131.道别等于死去一点点。    ——雷蒙德·钱德勒</p><p>132.你笑起来真像好天气。 </p><p>133.明月直入，无心可猜。  ——李白</p><p>134.我爱你已久，永不能忘。    ——《面纱》</p><p>135.所有的大人都曾经是小孩，虽然只有少数的人记得。    ——《小王子》</p><p>136.我需要，最狂的风和最静的海。    ——顾城</p><p>137.醒来明月，醉时清风。  ——元好问</p><p>138.我明白你会来，所以我等。    ——沈从文</p><p>139.一个人行走的范围，就是他的世界。    ——北岛</p><p>140.剑未配妥，出门已是江湖。  ——痞子蔡</p><p>141.带不走的留不下，留不下的莫牵挂。</p><p>142.夏天死的时候，所有莲都殉情。  ——余光中</p><p>143.从此山河永寂，算不出来日方长。</p><p>144.你来时冬至，但眉上风止，开口是“我来得稍迟”。 </p><p>145.我与你隔着长风深尘，过不得，退不舍。</p><p>146.长街长，烟花繁，你挑灯回看，短亭短，红生辗，我抱箫再叹。</p><p>147.三千里流水长江，三千里长空月明。</p><p>148.春日游，杏花吹满头，陌上谁家年少，足风流。</p><p>149.静水流深，沧笙踏歌。三生阴晴圆缺，一朝悲欢离合。</p><p>150.于浩歌狂热之际寒，于天上看见深渊，于一切眼中看见无所有，于无处希望中得救。</p><p>151.原来岁月太长，可以丰富，可以荒凉，能忘掉结果，才能忘记遇见。</p><p>152.这大雨还没有将人情世故布置好之前，且做浮生野马。</p><p>153.回首旧年漫月里的所有的怦然心动，你仍拔得头筹。</p><p>154.帝王将相，才人佳子的故事，诸位听得不少。那些情情义义，恩恩爱爱，卿卿我我，都瑰丽莫名。根本不是人间颜色。人间，只是抹去了脂粉的脸。        ——《霸王别姬》</p><p>155.相逢的人会再相逢。    ——村上春树</p><p>156.黑夜一无所有，为何给我安慰。    ——海子</p><p>157.碑是那么小，与其说是为了纪念，更像是为了忘却。    ——刘慈欣</p><p>158.亦知人生要有别，但恐岁月去飘忽。    ——苏轼</p><p>159.一切都在无可挽回地走向庸俗。  ——王小波</p><p>160.目光放远，万事皆悲。  ——钱钟书</p><p>161.暗恋是一种礼貌，暗地里盖一座城堡。  ——《无可救药》</p><p>162.今夜扁舟来决汝，死生从此明西东。</p><p>163.后来春雨落汴京，只君一人雨中停。</p><p>164.渐行渐远渐无书。</p><p>165.有时候一个人的战争注定单枪匹马。</p><p>166.马向胡漠人稀处，剑指春江明月楼。</p><p>167.我守着我的地狱，你信奉你的神明。</p><p>168.纵人生三万轮日夜，兴沉起灭，与尔同欢。</p><p>169.车和车总是撞，人和人总是让。  ——《推拿》</p><p>170.船在海中，马在山中。  ——洛尔迦</p><p>171.除非我不想赢，否则没有人能让我输。  ——《海贼王》</p><p>172.嘴巴那么毒，内心一定有很多苦吧。  ——《破产姐妹》</p><p>173.伤心桥下春波绿，曾是惊鸿照影来。  ——陆游</p><p>174.只是自以为是心若顽石，却终究人非草木。</p><p>175.其他人是头顶星辰，是南迁候燕。你不一样，你是老潦笠翁，是秋隔遗音，是百鲜正艳时，独取一只，佩于胸前。</p><p>176.要么荣归故里，要么客死他乡。</p><p>177.人之所以痛苦，在于追求错误的东西。    ——路遥</p><p>178.路途曲折漫长，步步落子无悔。</p><p>179.斜坡上的杂草野花，谁说不是一草一千秋，一花一世界呢？    ——龙应台</p><p>180.兰亭花无序，此后莫相离。  ——王羲之</p><p>181.山中若有眠，枕的是月，夜间若渴，饮的是银瓶泄浆。      ——简媜</p><p>182.我很快就适应了这种生活，虽然有时只是逢场作戏，虽然有许多只是雾水情缘，不过没关系了，哪有那么多的一生一世。      ——王家卫</p><p>183.人生不过是午后到黄昏的距离，茶凉言尽，月上柳梢。    ——徐志摩</p><p>184.毕竟这穿梭山河的箭，刺的都是思念成疾的人。</p><p>185.秋日薄暮，用菊花煮竹叶青，人与海棠俱醉。  ——林清玄</p><p>186.人世的风雪，不是说停就停，如同命运的选择，并非尽如人意。    ——宫无后</p><p>187.白昼解不开的结，黑夜慢慢耗。</p><p>188.此去不经年，后会必有期。</p><p>189.可能我只是你生命里的一个过客，但你不会再遇见第二个我。  ——安东尼</p><p>190.长大后谁不是离家出走，茫茫人海里游。    ——《大中小》</p><p>191.半生漂泊，每一次都雨打归舟。</p><p>192.我北行，故人南去。</p><p>193.为了适应眼前的需要，我多少学会了一些厚颜无耻。</p><p>194.佛何须你的皈依啊，佛只要你欢喜。</p><p>195.人间值得，是我不值得。</p><p>196.这城市总是风很大，孤独的人总是晚回家。</p><p>197.你说你孤独，就像很久以前，火星照耀十三个州府。</p><p>198.从此春秋两不沾，风月不相关。</p><p>199.最明亮时总是最迷茫，最繁华时也是最悲凉。</p><p>200.黯然销魂者，唯别而已矣。    ——江淹</p><p>201.这个世界只允许我们在孤独和卑劣之间选择。</p><p>202.此后如竟没有炬火，我便是唯一的光。    ——鲁迅</p><p>203.成年人的崩溃往往以一句没事结尾，因为他们知道自己的残局只能自己收拾。</p><p>204.小丑的嘴唇在微笑，他的笑话越来越滑稽，因为在他逗人发笑的时候，他更加感到自己无法忍受的孤独。</p><p>205.刀鞘保护刀的锋利，它自己则满足于它的迟钝。    ——泰戈尔</p><p>206.世界上最遥远的距离不是生离死别，而是对方已经云淡风轻，你却念念不忘。</p><p>207.我们都很无知，但并非真正无辜，人人都是共犯。 ———《毒木圣经》</p><p>208.西洋的纸、餐具什么的，都是亮晶晶的。闪亮的东西让人心神不宁。而东方的纸和餐具，以及玉，都是呈现一种润泽的肌理，其中蕴含了岁月的沧桑。 ———谷崎润一郎</p><p>209.如果脏了还用，就莫不如一开始就用带颜色的。白的就要纯白才行。——夏目漱石</p><p>210.也许人来到这个世界都有一种使命感，关于生命和情感都有自己的归属，于是就一定会有放弃，即使不舍。生命只是一个过程，最大程度地遵从自己的内心也是一种活法。 ———电影《碧海蓝天》</p><p>211.当我们凶狠地对待这个世界时，这个世界突然变得温文尔雅了。  ——余华</p><p>212.虽然这世界上吵吵嚷嚷的，但夜深的时候还是很安静。夜深人静，这个词本身就多美好啊。那么我们这些人啊，就不要非把自己的愚见嚷得天下皆知，安安静静地每个人想想，这不也很有意思吗？ ———《犯罪心理》</p><p>213.乱世的热闹来自迷信，愚人的安慰只有自欺。 ———老舍</p><p>214.逆风的方向更适合飞翔，我不怕千万人阻挡，只怕自己投降。  ——五月天《倔强》</p><p>215.到不了的都叫远方，回不去的都叫故乡。    ——汪国真</p><p>216.大概是我走一程，期许一程，回望一程。目之所及里没有他，翻山越岭也没有他。可他分明就在这世上，也在我心尖上。</p><p>217.一下雪，西安就成了长安，北京就成了北平，南京就成了金陵，合肥就成了庐州，扬州就变成广陵，苏州就成了姑苏，开封也成了汴梁。</p><p>218.桥上走的哪一句，我没到你别起韵，你就把头转过去，莫给我消息。</p><p>219.甚至一个短暂的瞬间也拥有丰腴的过去。    ——辛波斯卡《无需标题》</p><p>220.你说，我们就山居于此吧，胭脂用尽时，桃花就开了。  ——与谢野晶子</p><p>221.我独自一人，对自己的灵魂，满怀着巨大的爱情。      ——茨维塔耶娃</p><p>222.当你从书页上抬眼，然后合上书本依然感觉到，住在那片光里。    ——马克·斯特兰德</p><p>223.在黑白里温柔地爱彩色，在彩色里朝圣黑白。    ——汪曾祺 《人间草木》</p><p>224.云外峰峦翠欲埋。雨沾黄叶湿青鞋。小惊春色入寒荄。 风月愁新空雁字，神仙梦冷忆鸾钗。凄凉不是好情怀。      ——高观国《浣溪沙》</p><p>225.百年梳头三万六千回。</p><p>226.百岁光阴一梦蝶,重回首往事堪嗟。今日春来,明朝花谢,急罚盏夜阑灯灭。          ——马致远《夜行船》</p><p>227.夜凉吹笛千山月，路暗迷人百种花。棋罢不知人换世，酒阑无奈客思家。          ——欧阳修《梦中作》</p><p>228.孤独是一匹衰老的兽。潜伏在我乱石磊磊的心里。</p><p>229.秋雨如挽歌。    ——张潮《幽梦影》</p><p>230.河海生云，朔漠飞沙。      ——谢惠连《雪赋》</p><p>231.英雄失足，每每至死不改。</p><p>232.我坐在台阶上想你的时候，只有月亮经过。</p><p>233.不愿勾起相思，不敢出门看月；偏偏月进窗来，害我相思一夜。    —— 胡适</p><p>234.许多夜晚重叠，悄然形成黑暗，玫瑰吸收光芒，大地按捺清香，</p><p>为了寻找你，我搬进鸟的眼睛，经常盯着路过的风。</p><p>——《路边野餐》</p><p>235.祝你今天愉快，你明天的愉快留着我明天再祝。      ——王小波《爱你就像爱生命》</p><p>236.“看，前面漆黑一片，什么也看不到。”</p><p>“也不是，天亮后便会很美的。”          ——《喜剧之王》</p><p>237.“我们爬到山顶 坐到了晚上 什么都看不到 我想把两颗眼珠挖出来 把月亮切成两半 一半塞进左边的眼眶里 另一半塞进右边的眼眶里 我哭的时候 会有流星陨落 你要记得许愿”</p><p>238.“一块玻璃准备跳楼你猜他会说什么”</p><p>“什么呢”</p><p>“晚安，我碎咯”</p><p>239.“你喜欢四月吗？</p><p>关于你我能想到最适合的就是四月了。</p><p>春日刚刚复苏，太阳还是温暖的，有微风还有花草香，就像你的感觉，</p><p>淡淡的，温柔的，却格外明亮的。”</p><p>240.若逢新雪初霁，满月当空，下面平铺着皓影，上面流转着亮银，而你带笑地向我步来，月色与雪色之间，你是第三种绝色。      ——余光中</p><p>241.向深秋再走几日，我就会接近她震悚的背影。她开口说江南如一棵树，我眼前的景色便开始结果。        ——张枣 《深秋的故事》</p><p>242.你们呐。要常怀敬畏之心，不要被生活的繁琐消磨热情。因为生活本就是平庸无度。年轻时，用力去生活。年老时，想象自己年轻时的模样，永远朝气蓬勃。最后祝你们，一生平安，前程万锦。        ——耳东兔子</p><p>243.我曾经心中执剑的少年，此刻也混迹于市井之间。——朱炫</p><p>244.我行过许多地方的桥，看过许多次数的云，喝过许多种类的酒，却只爱过一个正当最好年纪的你。——沈从文</p><p>245.我们这一生回遇到很多人，与多少人相识相交成为朋友，有志趣相投，有萍水相逢的，有一生一次的，也有不久之后就相忘两两的，其中肯为你掏心掏肺的，少之又少，更何况不问缘由毫不犹。</p>]]></content>
      
      
      <categories>
          
          <category> 最美句子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最美的句子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抖音外放....</title>
      <link href="/2019/07/12/dou-yin-wai-fang-qin-ma-xia-zang/"/>
      <url>/2019/07/12/dou-yin-wai-fang-qin-ma-xia-zang/</url>
      
        <content type="html"><![CDATA[<h3 id="世界上最大声的噪音"><a href="#世界上最大声的噪音" class="headerlink" title="世界上最大声的噪音"></a>世界上最大声的噪音</h3><div id="echarts126" style="width: 85%;height: 400px;margin: 0 auto"></div><script src="https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts126'));        // 指定图表的配置项和数据        var option =  {    tooltip: {        trigger: 'item',        formatter: "{a} <br/>{b}: {c} ({d}%)"    },    legend: {        orient: 'vertical',        x: 'left',        data:['重型摩托车','重金属乐队','大型客机','散弹枪开火','乱嚎小学生','抖音外放者']    },    series: [        {            name:'数据来源',            type:'pie',            selectedMode: 'single',            radius: [0, '30%'],            label: {                normal: {                    position: 'inner'                }            },            labelLine: {                normal: {                    show: false                }            },            data:[                {value:335, name:'重型摩托车', selected:true},                {value:679, name:'重金属乐队'},                {value:1548, name:'大型客机'}            ]        },        {            name:'数据来源',            type:'pie',            radius: ['40%', '55%'],            label: {                normal: {                    formatter: '{a|{a}}{abg|}\n{hr|}\n  {b|{b}：}{c}  {per|{d}%}  ',                    backgroundColor: '#eee',                    borderColor: '#aaa',                    borderWidth: 1,                    borderRadius: 4,                    // shadowBlur:3,                    // shadowOffsetX: 2,                    // shadowOffsetY: 2,                    // shadowColor: '#999',                    // padding: [0, 7],                    rich: {                        a: {                            color: '#999',                            lineHeight: 22,                            align: 'center'                        },                        // abg: {                        //     backgroundColor: '#333',                        //     width: '100%',                        //     align: 'right',                        //     height: 22,                        //     borderRadius: [4, 4, 0, 0]                        // },                        hr: {                            borderColor: '#aaa',                            width: '100%',                            borderWidth: 0.5,                            height: 0                        },                        b: {                            fontSize: 16,                            lineHeight: 33                        },                        per: {                            color: '#eee',                            backgroundColor: '#334455',                            padding: [2, 4],                            borderRadius: 2                        }                    }                }            },            data:[                {value:110, name:'重型摩托车'},                {value:115, name:'重金属乐队'},                {value:140, name:'大型客机'},                {value:165, name:'散弹枪开火'},                {value:300, name:'乱嚎小学生'},                {value:1000, name:'抖音外放者'}            ]        }    ]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><pre class=" language-text"><code class="language-text">曾经我向神灯许愿：我希望以后搭车旁边都能坐着一个好看的人。神灯回答：不行，好看的人太少了。于是我换了一个愿望：我希望周围的人别外放抖音。神灯说：那我们还是谈谈好看的人吧。</code></pre><p><img src="/medias/low/dy.jpg" alt="我只想说一句抖音外放亲妈下葬"></p><p>自从短视频兴起以后，想要安静的出行都成了奢望。</p><p>知乎也出现了一个相关问题：在公众场合什么行为会让人显得很low？</p><p>最高赞的便是抖音外放，其次还有当众脱鞋、抖腿、随处吸烟…</p><p><img src="/medias/low/sb.jpg" alt="最讨厌的行为莫过于不自觉，大家都是成年人了，谁都不会去说谁，我只希望您能给他/她人留出一片安静的土地来，不再用噪音去浪费别人的生命。"></p><p>严格说起来这些其实只是个人习惯，和low无关，但实际上这些小事又的确让周围的人受到了影响,也能更好的体现一个人的品德素养。</p><blockquote><p><code style="color:red;">“我们要明白什么行为可能会引起他人不适，从此更加严于律己，尊重他人就是尊重自己。”</code></p></blockquote><blockquote><p>听过一句话：戴上耳机，整个世界是你的，不带耳机，你的世界是别人的。</p></blockquote><p>每次听到这些神曲，我都怀疑自己上了黑车，这根本不是去上班，而是直通野迪现场。</p><p><img src="/medias/low/dy1.jpg" alt="给我安静..."></p><p>喜欢刷抖音没有错，这确实是一种获得快乐的途径。</p><p>但请您永远不要把快乐建立在别人的“痛苦”之上，有人喜欢抖音自然也会有人讨厌，谁都不能以外放的形式让陌生人被迫接受骚扰，因为你是在浪费他人的生命。</p><p>如果你有外放抖音的习惯，下次请尽可能戴上耳机。</p><p><img src="/medias/low/11.png" alt="世界本应该安静，为了Peace希望您在公共场合戴好耳机，大家好才是真的好。"></p>]]></content>
      
      
      <categories>
          
          <category> 人生感悟 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>决与择的高度</title>
      <link href="/2019/06/28/jue-yu-ze/"/>
      <url>/2019/06/28/jue-yu-ze/</url>
      
        <content type="html"><![CDATA[<blockquote><p>抉择本身并没有对错，我们的每一天都在面临着或大或小的选择，为了寻求世人的认同而寻求答案，那么世人会在你的周围围起一道高高的墙，我们不应该让世人决定你的高度,而是应该打破常规，走出一条属于自己的路。</p></blockquote><p><img src="/medias/txjg/1.jpg" alt></p><p><img src="/medias/txjg/2.jpg" alt></p><p><img src="/medias/txjg/3.jpg" alt></p><p><img src="/medias/txjg/4.jpg" alt></p><p><img src="/medias/txjg/5.jpg" alt></p><p><img src="/medias/txjg/6.jpg" alt></p><p><img src="/medias/txjg/7.jpg" alt></p><p><img src="/medias/txjg/8.jpg" alt></p><p><img src="/medias/txjg/10.jpg" alt></p><p><img src="/medias/txjg/11.jpg" alt></p><p><img src="/medias/txjg/12.jpg" alt></p><p><img src="/medias/txjg/13.jpg" alt></p><p><img src="/medias/txjg/14.jpg" alt></p><p><img src="/medias/txjg/15.jpg" alt></p><p><img src="/medias/txjg/16.jpg" alt></p><p><img src="/medias/txjg/17.jpg" alt></p><p><img src="/medias/txjg/18.jpg" alt></p><p><img src="/medias/txjg/19.jpg" alt></p><p><img src="/medias/txjg/20.jpg" alt></p><p><img src="/medias/txjg/21.jpg" alt></p><p><img src="/medias/txjg/22.jpg" alt></p><p><img src="/medias/txjg/23.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 人生感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 决与择的高度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈雷</title>
      <link href="/2019/06/22/ha-lei/"/>
      <url>/2019/06/22/ha-lei/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/featureimages/%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97.gif" alt="哈雷"></p><pre class=" language-text"><code class="language-text">"我本是一缕游魂,是你用意志物化了我!注定此生,为你而生,为你而灭!"或许生来便要做出选择或把意志尘封于寒冰或让生命燃烧成炽热我知我的生命无法承载爱你的激情但依然选择焚尽躯体绕你运行我选择身的死即是心的生若未见你我只不过是天空中一颗平静的星如今即使我消逝至少还有你记得那不变的爱情望每个月夜你都会仰望天空中那个你曾向我许愿的地方每当你迷惘愿我未逝的意志都做你无形的指引注定了我的爱只能依附于短暂的生命但若可以来世仍愿做你的哈雷那颗曾划破你天空的星</code></pre><p><img src="/medias/featureimages/012.jpg" alt="哈雷"></p>]]></content>
      
      
      <categories>
          
          <category> 诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随心笔 </tag>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件私藏分享</title>
      <link href="/2019/01/02/ruan-jian-si-cang-fen-xiang/"/>
      <url>/2019/01/02/ruan-jian-si-cang-fen-xiang/</url>
      
        <content type="html"><![CDATA[<img src="/medias/dpcq/dpcq123.jpg" width="90%"><h4 id="软件目录导航"><a href="#软件目录导航" class="headerlink" title="软件目录导航"></a>软件目录导航</h4><hr><h5 id="一、电脑办公"><a href="#一、电脑办公" class="headerlink" title="一、电脑办公"></a>一、电脑办公</h5><hr><table><thead><tr><th align="center">软件名称</th><th align="center">软件说明</th><th align="center">软件来源</th><th align="center">软件版本</th><th align="center">百度网盘下载</th></tr></thead><tbody><tr><td align="center"><a href="https://pan.baidu.com/s/101Fwh2SErmw4ykz6WI2d_g" target="_blank" rel="noopener">Office</a></td><td align="center">办公必备</td><td align="center">软件安装管家</td><td align="center">2016、2019</td><td align="center">提取码: kcyp)</td></tr><tr><td align="center"><a href="http://blog.sina.com.cn/u/1622662495" target="_blank" rel="noopener">慧办公</a></td><td align="center">超级办公插件帮你解决world、Excel的常用批处理提高办公效率</td><td align="center">网络</td><td align="center">无</td><td align="center">提取码: 无（提供网址)</td></tr><tr><td align="center"><a href="https://pan.baidu.com/s/1s7_njwT80fVg_kySc1JFvA" target="_blank" rel="noopener">未来教育</a></td><td align="center">二级MSOffice高级应用 四级信息安全工程师等等</td><td align="center">网络</td><td align="center">3.0</td><td align="center">提取码: dyct</td></tr><tr><td align="center"><a href="https://pan.baidu.com/s/1trpZZU5mRn49c5WVThEGmg" target="_blank" rel="noopener">福昕高级PDF</a></td><td align="center">PDF编辑器(破解版属于企业级PDF编辑)</td><td align="center">网络ZD423</td><td align="center">无</td><td align="center">提取码: 8n8t</td></tr><tr><td align="center"><a href="https://pan.baidu.com/s/1E2p-AK0kcRcQ7eFIe-iyCA" target="_blank" rel="noopener">高级PDF转换器</a></td><td align="center">PDF编辑器(破解版) PDF转world、PDF转Excel等等</td><td align="center">网络ZD423</td><td align="center">无</td><td align="center">提取码: xg84</td></tr><tr><td align="center"><a href="https://pan.baidu.com/s/1_MDLgd2ArEplha_duiEoaw" target="_blank" rel="noopener">图片批处理</a></td><td align="center">批量图片格式的转换、分辨率dpi大小的、改变图片大小的设置、水印的添加等，而且还对目前市场上的主流格式进行支持，包括JPEG、BMP、PNG、TIFF和GIF等常见图像格式等。</td><td align="center">网络ZD423</td><td align="center">无</td><td align="center">提取码: bu5h</td></tr><tr><td align="center"><a href="https://pan.baidu.com/s/1KjFiyr4ZkewbZTQrTGwKWA" target="_blank" rel="noopener">高级批量处理</a></td><td align="center">批量文件指定命名、提取、插入、删除、后缀名等为绿色版（占用内存超小）</td><td align="center">网络</td><td align="center">无</td><td align="center">提取码: 6hvn</td></tr><tr><td align="center"><a href="https://pan.baidu.com/s/1i9yGQgv7kOMz-5tlZJ1KNQ" target="_blank" rel="noopener">坐标及参数转换</a></td><td align="center">可实现四、七参数、坐标等多种转换很强大也是绿色版</td><td align="center">网络</td><td align="center">无</td><td align="center">提取码: 6ddk</td></tr></tbody></table><hr><h5 id="二、Gis地理信息"><a href="#二、Gis地理信息" class="headerlink" title="二、Gis地理信息"></a>二、Gis地理信息</h5><hr><table><thead><tr><th align="center">软件名称</th><th align="center">软件说明</th><th align="center">软件来源</th><th align="center">软件版本</th><th align="center">百度网盘下载</th></tr></thead><tbody><tr><td align="center"><a href="https://pan.baidu.com/s/1PIecStlQ6mc_cYhzRntqZw" target="_blank" rel="noopener">ArcGis</a></td><td align="center">破解版</td><td align="center">软件安装管家</td><td align="center">包含arcgis10.0-10.6</td><td align="center">提取码: yu6l</td></tr><tr><td align="center"><a href="https://pan.baidu.com/s/1bvRfs8255MO32xV8xgTWDQ" target="_blank" rel="noopener">CAD</a></td><td align="center">破解版</td><td align="center">软件安装管家</td><td align="center">包含CAD2004-2019</td><td align="center">提取码: zt33</td></tr><tr><td align="center"><a href="https://pan.baidu.com/s/1LKYEl-_Z7W1OFvlAanZ_Nw" target="_blank" rel="noopener">ERDAS</a></td><td align="center">破解版</td><td align="center">软件安装管家</td><td align="center">9.2</td><td align="center">提取码: e5k0</td></tr><tr><td align="center"><a href="https://pan.baidu.com/s/1udFOFviP3UzK4pbnPD2uxA" target="_blank" rel="noopener">Global</a></td><td align="center">破解版</td><td align="center">软件安装管家</td><td align="center">无</td><td align="center">提取码: 924q</td></tr></tbody></table><hr><h5 id="三、室内-外设计"><a href="#三、室内-外设计" class="headerlink" title="三、室内/外设计"></a>三、室内/外设计</h5><hr><table><thead><tr><th align="center">软件名称</th><th align="center">软件说明</th><th align="center">软件来源</th><th align="center">软件版本</th><th align="center">百度网盘下载</th></tr></thead><tbody><tr><td align="center"><a href="https://pan.baidu.com/s/1c01Vj6u73snQwQH_2X0G3g" target="_blank" rel="noopener">PS</a></td><td align="center">破解版</td><td align="center">软件安装管家</td><td align="center">2018CC、2017CC、2015CC</td><td align="center">提取码: 9vm4</td></tr></tbody></table><hr><h5 id="四、持续更新中-gt-gt-gt-gt-gt"><a href="#四、持续更新中-gt-gt-gt-gt-gt" class="headerlink" title="四、持续更新中&gt;&gt;&gt;&gt;&gt;"></a>四、持续更新中&gt;&gt;&gt;&gt;&gt;</h5><hr><p><img src="/medias/featureimages/012.jpg" alt></p><p><code>郑重声明：软件资源全部收集来源于互联网，所提供下载链接也是站外链接，网站本身并不存储相关资源文件，版权归著作人和出版社所有。本站仅提供一个观摩学习的环境，将不对任何资源负法律责任。如果侵犯了您的权利，请及时发送邮件到“<a href="mailto:2446875775@qq.com" target="_blank" rel="noopener">2446875775@qq.com</a>”，我会第一时间进行改正或删除处理，保证您的权利！站内所有资源仅供学习与参考，请勿用于商业用途，并请于下载后24小时内删除，否则产生的一切后果将由您自己承担！</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件私藏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>化蝶</title>
      <link href="/2018/06/22/hua-die/"/>
      <url>/2018/06/22/hua-die/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/featureimages/%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97.gif" alt="化蝶"></p><pre class=" language-text"><code class="language-text">传说中悲伤的眼泪可以化为星凄美的故事可以化做蝶站在那片古老而又永恒的星空下披着万点迷惘的星辉化做一只如烟的蝶栖落你的眼中也许只是颤抖一下双翅滴落水珠的一顿时化做最美最亮的星一直融入你的心底</code></pre><p><img src="/medias/featureimages/012.jpg" alt="化蝶"></p>]]></content>
      
      
      <categories>
          
          <category> 诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随心笔 </tag>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21点算法</title>
      <link href="/2018/04/08/21-dian-suan-fa/"/>
      <url>/2018/04/08/21-dian-suan-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>21点(blackjack)算法［转］ – Beat the dealer 来源： 顾斌梦追い虫的日志 </p></blockquote><p><em>21点的优选算法，据说把输牌的概率降低到了0.5%，研究一下。 首先学的是二十一点的规则,我们可以看出，二十一点的结果很大程度上依赖于玩家的选择。象轮盘赌、百家乐那种游戏，玩家压上钱后，就只 好祈祷上帝，期盼好运降临，然后咣当一声，一拍两散，是死是活，当场就见分晓。二十一点、牌九等游戏则不同，在发下牌后，玩家可以在一定程度上控制自己的 最终结果，因此如果应对得当，可以使自己的损失减到最小。这就是所谓“基本策略（Basic Strategy）”。</em> </p><hr><h4 id="二十一点规则"><a href="#二十一点规则" class="headerlink" title="二十一点规则"></a>二十一点规则</h4><p>1.游戏由玩家和庄家（即赌场的发牌员）对玩，看谁的牌面点数更靠近21点。但如果超过了21点，则称为“爆掉”，算输。其中花牌（J，Q，K）都算10点，A可以算1点，也可以算11点，看哪种情况更有利。玩家之间不做比较。<br>2.游戏开始时，所有玩家和庄家各拿两张牌，一般来说，是玩家两张牌牌面朝上，庄家一张牌面朝上，一张牌面朝下。<br>3.两张牌的点数，肯定介于2到21点之间。21点只可能是一张10（包括J，Q，K，下同）和一张A，这叫“天成（BlackJack，以下简称BJ）”，除非庄家也拿到了BJ，不然赢一倍半的赌注。<br>4.玩家在游戏中有如下选择：<br>（1）要牌，直到他（或她，下同）认为自己的牌面离21点足够近了。比如手头的牌是4和5，加起来才9点，那么无论再加张什么牌，都不会爆掉，当然应该要牌。<br>（2）停牌，即不再要牌，比如手头是张10和9，已经很接近21点了，就不用再要牌了。<br>（3）加倍，即加一倍赌注，再要且仅要一张牌。比如手头是张4和7，这时要牌是肯定安全的，而且很可能拿到10或者其他点数较大的牌，一张就够了，值得加倍。这只能在刚拿到两张牌时使用，要过牌后就不能加倍。<br>（4）分牌，即拿到两张点数相同的牌时，可以加一份赌注，把牌分为两份，比如手头是两张8，加起来是16，非常糟糕的点数，这时就应该把牌分为两个8，再要两张牌来，很可能拿到10形成18点，就把坏牌变成好牌了。<br>（5）保险，即在庄家亮着的牌是A时，由于他拿到BJ的几率很大，玩家可以下赌注一半的保险。如果庄家没有拿到BJ，保险金就输掉了，如果庄家拿到了BJ，付给 玩家两倍保险金。很多玩家在自己拿到BJ的情况下，会下赌注一半的保险，以保证自己能赢回一倍赌注，因为如果庄家没有BJ，那他能赢赌注的一倍半，去掉输 掉的半倍保险，还赢一倍赌注；如果庄家有BJ，那他们牌面打平，但保险能赚回一倍赌注。<br>（6）投降，这时只输一半赌注。如果自己的牌是10和6，庄家亮着的牌是A，那还是趁早投降好。<br>5.庄家在手头的牌是A时，会问大家是否要保险，然后检查自己的牌是否BJ。如果手头的牌是10，也会检查是否BJ，但这时玩家就不能买保险了。<br>6.如果玩家要牌爆掉，算输，庄家当场收掉他的赌注。<br>7.当所有的玩家都做出选择后，庄家的玩法是固定的：亮出底牌，如果点数不到17点，则必须要牌，直到超过了16点或爆掉为止。<br>8.如果双方都还没有爆掉，则更接近21点的那个胜，如果双方点数相同，则算打平。 </p><hr><p>在这些基本规则之上，各地的赌场还会有些变动，比如有的赌场在软17点（A算11点时的点数称为“软”，比如A和6，就是软17点）时停下，有的则 必须继续要；有的赌场连续分牌最多只能有四次，有的可以无限分下去；有的A分牌只能一次；有的赌场分牌后不许加倍；有的赌场不许投降；等等等等。 </p><p>还有些变种的二十一点游戏，比如“双亮（Double Exposure）二十一点”，就是庄家的两张底牌都亮着，但如果双方点数相同，算庄家赢。又如带大小鬼（Joker）的二十一点，庄家拿到鬼牌得扔掉， 玩家拿到鬼牌却可以指定它的点数，比如凑成11点，或者当A用等等。 </p><p>“基本策略”的内容可见附二，没有任何神秘之处，任何一个懂概率论和计算机语言的人都可以写个程序，把它推导模拟出来。如前所言，背会它的难度在元素周期表之上，政治课教条之下。掌握了基本策略，可在典型规则下把庄家优势减到0.5％。 有了基本策略，我再到大西洋城去试手时，就从游击战升级到阵地战，不再玩一把就跑，而是坐下来和庄家周旋到底。一开 始我还有些紧张，使出大学里对付政治考试的必备招数：把基本策略表塞在裤袋里，玩不了几手就借口上厕所，掏出表来仔细对照一番。——后来我在赌场看见一个 老太太，堂而皇之地把基本策略表放在手边，发牌后就拿手指颤巍巍地在表上游走，找到对应的那一格，然后抬头转告发牌员。</p><p>赌场的工作人员或熟视无睹，或和她 开些无伤大雅的玩笑。其他人有不确定的地方也问老太太，老太太这时就特自豪地查找一番，然后摆出副权威的样子说：“你该要牌！”我才恍然自己当初太做贼心 虚了。 当然，我们大学里也有些监考老师对在政治考试里的作弊睁一只眼闭一只眼，但赌场允许人们用基本策略，并不是同样地出于天良未泯，而是精确地计算出了，就算你用基本策略玩，优势仍然在庄家那边。 不过对于庄家这0.5％的优势，我也实在没什么要抱怨的了。</p><p>假设一小时玩一百手，每手压十块钱，平均下来，一小时也 就输五块钱——坐在富丽堂皇的赌场里，享受着工作人员笑容可掬的服务、穿着高叉低胸的女侍们提供的免费酒水，以及赌博带来的精神刺激，每小时才付五块钱， 难道不是很合算的买卖吗？一场两小时的电影还要十块钱呢，有几部电影能象赌博那么刺激？ 更妙的是，感谢众多“萝卜”的存在，赌场认为平均每个顾客在二十一点上会输得远多于0.5％，于是会返回一定的“谢 礼（Comp，Complimentary的简称）”给顾客，比如餐券、戏票、旅馆房间等。我经常玩了四个小时下来，只输了二十块钱，但赌场会按照你输两 百块钱的标准来给你谢礼，比如一张价值十元的餐券。那就相当于我只花十块钱，就在赌场里玩了半天。 而且基本策略也可以用来挣钱，那就是赚网络赌场的红利。</p><p>网络赌场的成本远低于现实赌场，他们不需要起豪华高楼，不需 要买设备器具，不需要雇人，也不需要白送酒水，因此一进入网络时代，网络赌场就如雨后春笋般，争先恐后地冒出在广阔无垠的网络沃土。为了竞争客源，每家网 络赌场都会推出五花八门的优惠，其中最普及的一种是，新会员加入时，可以得到一笔红利作为奖励。数额因赌场而异，一般在50到200美元之间。 当然，这笔钱不会让你白白拿到，赌场规定，要在他们那里累计下注到一定数目，比如二十倍，才可以把那笔红利提出来。 他们的如意算盘是，一般赌客每把平均会输5％，累计下二十倍的注，也就把白送的红利已经输回来了。</p><p>这相当于用玩家自己的钱把他们吸引过来成为顾客。反正他 们的成本不过是一台服务器、一套软件、一点带宽，最适合薄利多销。 显然，一个懂基本策略的人马上就会发现其中的漏洞：如果运用基本策略玩二十一点，只输0.5％，赌二十倍下来，才输 10％，那就能白赚到90％的红利。——当然这么做的人只是少数，网络赌场的大多数顾客还是萝卜，使赌场仍然大赚特赚，乐此不疲地推出各种红利来，让我们 这些“获利玩家（Advantage Player）”能一家家赌场挨个揩油。 </p><p>赌场对我们自然也有防范措施，比如常规定红利不准取出，只能在赌场里赌掉。这种红利，在网络赌徒圈里有个浑名，叫 “粘利（Sticky）”。不过人民群众自然也有对付它的办法：把剩下的红利拿到轮盘上去赌一把，输了就算了，赢了的话把多出的那部分取出，剩下的再拿去 赌，这样能拿回的期望值是： a + a^2 + a^3 + …… ＝ a/(1-a) 其中a为每把赢的概率，是一个略小于1/2的常数，那么上式也就趋向于略小于1。 </p><p>另一个有趣的规定是：一般人只要累计下注二十倍就可以取出红利了，但来自中国大陆的玩家则需要累计下到二百倍。看来国内同胞早已威震网络赌场界、横扫抢红包，吓得赌场都要专门把他们列为高危人群，让我觉得如果我不在网络赌场里赢上一把，简直要愧为中国人了。 于是我带着崇高的国家荣誉感，集中玩了一批网络赌场，三个月下来，也赚了有三千多块钱。然后我就对网络赌场失去了兴 趣，因为比较好的赌场我都差不多玩遍了，但更重要的原因是，我已经逐步掌握了算牌的方法，揩网络赌场油与算牌所能带来的刺激和成就感比起来，便如河水之于 沧海，完全不值一提。 二十一点算牌法的原理，可见附三。</p><p>我趁着放寒假，练了两个星期的“高低算牌法”，到快开学前的那个星期，租了一辆车，揣着网络赌场揩来的3600美元，直奔大西洋城而去。 </p><h4 id="二十一点基本策略"><a href="#二十一点基本策略" class="headerlink" title="二十一点基本策略"></a>二十一点基本策略</h4><p>规则为：庄家在软17点时停止、无限分牌加倍、允许投降。 为了方便分析，我们先假设52张牌出现的概率始终相同，也就是说每张牌都是从一个无穷多副牌组成的牌盒里抽出来的，或者说前面出过的牌不影响后面的牌，换句话说，每张牌相互之间都是独立的。 </p><p>首先，一个明显的结论是，每个点数出现的概率都是1/13，除了10出现的概率是4/13。这样，如果庄家的亮牌是A，他实际拿到BJ的可能性是4/13，拿不到的可能性是9/13。玩家投保险，保中了的回报是双倍保险金，没中的话输掉保险金，</p><p><code>因此总预期收益是： 4/13 * 2 + 9 * 1/13 * (-1) = －1/13 </code>也就是说，从概率上讲，投保险是得不偿失的，平均13次保险中，赢4次，输9次，庄家占7.7％的优势。所以，永远不要买保险。 在二十一点中，玩家最大的劣势来自于，如果玩家的牌爆掉的话，赌注当场输掉，哪怕庄家随后也爆掉。因此，如果玩家模仿庄家的玩法：16点或以下要牌，17点或以上停住，必输无疑。 为此赌场在游戏里加入了各种功能：分牌、加倍、投降、玩家拿了BJ后赢一倍半，以吸引赌客。如果用正确的玩法，可以把庄家的优势缩小到0.5％。这就是所谓“基本策略”。 </p><p>在上述规则下，基本策略为：</p><pre class=" language-text"><code class="language-text">庄家：2 3 4 5 6 7 8 9 10 A 玩家点数 <=8 H H H H H H H H H H 9 H D D D D H H H H H 10 D D D D D D D D H H 11 D DD D D D D D D H 12 H H S S S H H H H H 13 S S S S S H H H H H 14 S S S S S H H H H H 15 S S S S S H H H R H 16 S S S S S H H R R R >=17 S S S S S S S S S S </code></pre><p>其中H表示“要牌（Hit）”<br>S表示“停牌（Stand）”<br>D表示“加倍（Double down）”<br>R表示“投降（suRrender）”。 </p><p>以上的点数都是所谓“硬点数”，即不包括A或A算1点，以后如果不特别指明，各点都指“硬点数”。手中有A，而且A算11也不会爆掉，就是所谓“软点数”，应该运用下面这个表格： </p><pre class=" language-text"><code class="language-text">庄家：2 3 4 5 6 7 8 9 10 A 玩家 13 H H H D D H H H H H 14 H H H D D H H H H H 15 H H D D D H H H H H 16 H H D D D H H H H H 17 H D D D D H H H H H 18 S DS DS DS DS S S H H H >=19 S S S S S S S S S S </code></pre><p>“D”和“DS”都表示加倍，<br>在不可以加倍的情况下，<br>“D”表示要牌<br>“DS”表示停牌。 </p><p>最后是分牌策略：</p><pre class=" language-text"><code class="language-text">庄家：2 3 4 5 6 7 8 9 10 A 玩家 A,A P P P P P P P P P P 2,2 H H P P P P H H H H 3,3 H H P P P P H H H H 4,4 H H H P P H H H H H 5,5 D D D D D D D D H H 6,6 H P P P P H H H H H 7,7 P P P P P P H H H H 8,8 P P P P P P P P P P 9,9 P P P P P S P P S S 10,10 S S S S S S S S S S </code></pre><p>其中P表示“分牌（sPlit）”。 这三张表并不难背，因为里面有许多规律，最显著的就是有个分界线，横亘于庄家亮牌是6点和7点之间。</p><p>6点以下是庄家的坏牌，比较容易爆掉，对玩家有利，7点以上则对玩家不太利。我写了个小程序，算了下庄家的各个亮牌所可能导致的最终结果的百分比： </p><pre class=" language-text"><code class="language-text">亮牌 2 3 4 5 6 7 8 9 10 A 17: 13.9 13.5 13.0 12.5 16.8 37.0 12.9 12.0 11.1 13.0 18: 13.4 12.9 12.5 12.1 10.9 13.9 35.9 12.0 11.1 13.1 19: 12.8 12.4 12.0 11.6 10.3 8.0 12.9 35.1 11.1 13.1 20: 12.1 11.8 11.4 11.0 9.9 7.6 7.0 12.0 34.3 13.1 21: 11.4 11.2 10.8 10.5 9.4 7.0 6.6 6.1 11.2 36.2 爆掉: 36.4 38.3 40.3 42.2 42.8 26.4 24.6 22.8 21.2 11.5 </code></pre><p>由此再来看基本策略，就很好理解，也很好背了： </p><pre class=" language-text"><code class="language-text">1，11点或更小时，总可以要牌，如果9点时庄家亮牌是3到6，10或11点时庄家亮牌比自己差，还可以加倍。 2，17点或更多时，总该停住。 3，12点到16点间，如果庄家亮牌是6或更小，就该停住，不然就该要牌。唯一的例外是12点对庄家亮牌2和3点时也该要牌。另外在自己拿到16点而庄家是9、10、A，或自己拿到15点，而庄家是10点时，应该投降。 </code></pre><p>对于嫌麻烦的人，记住以上三点，就已经够了，因为这张表涵盖了大多数情况，拿到A和两张同样点数的牌的可能性不是那 么大。但是如果想少输点钱，还是必须把后两张表也背下来。好在它们也很有规律，比如软13到18点对庄家6点或更小的亮牌时，可以考虑加倍，其判断梯形 为：不太有把握的软13、14点只对庄家的5、6点加倍，软15、16扩展到庄家的4点，软17、18则扩展到3点。 </p><h4 id="二十一点算牌法"><a href="#二十一点算牌法" class="headerlink" title="二十一点算牌法"></a>二十一点算牌法</h4><p>二十一点能够算牌，是因为我们在讨论“基本策略”时提出的一个假设不成立： 假设52张牌出现的概率始终相同，也就是说每张牌都是从一个无穷多副牌组成的牌盒里抽出来的，或者说前面出过的牌不影响后面的牌，换句话说，每张牌相互之间都是独立的。 </p><p>显然，不可能有这样的由无穷多副牌组成的牌盒，前面出过的牌总会影响后面的牌。在算牌法刚出现的时代，赌场仍然使用 一副牌来玩二十一点，那么这个影响就更明显。比如，发牌员发出牌来，你拿到两个10（包括J、Q、K），庄家亮牌也是10，翻出底牌来还是10，那么下一 轮里10出现的概率已不再是4/13，而是12/48，即1/4，略低于4/13。同样的，其他点数出现的概率也已不再是1/13，而是1/12。 象轮盘赌这类游戏，每次轮盘转出什么结果，和上一次完全没有关系。</p><p>还有牌九这类游戏，每玩过一轮，就重新洗牌。这些 游戏里，每把赌博之间都是互相独立的。而二十一点的各把之间，在重新洗牌之前，不是独立的。前一把出现了什么牌，会影响到下一把。因此，如果我们能记住前 面出过什么牌，就能大致预测以后的赌局走势，从而调整自己的赌注，在对自己有利时下大注，在对庄家有利时下小注或不下注，就能在这个游戏里占到优势。 UCLA的数学教授爱德华·索普（Edward Thorp）在六十年代初发明了二十一点算牌法。他注意到，如果二十一点里10出现的概率增高，对庄家是不利的，因为庄家在十六点及更低时必须要牌，10 越多，就越容易爆掉，而对玩家来说，则更容易拿到BJ，赢一倍半的钱。所以他用一种“算10法（10-Count）”，计算剩下的牌中10的比例。正常情 况下，这个比例应该是4/13，庄家占优势。</p><p>但当前面出掉很多小牌，10的比例达到1/3时，优势就转移到玩家这边来了。 索普的运气不错，那时计算机也发明出来了，他找到IBM公司里的朋友，写了个程序来验证自己的算牌方法。那时的计算机跟今天比起来，还是速度低下、体积庞大的蠢物，足足运转了七天七夜，终于证明了这个方法是可行的。索普又自己到赌场里亲自实践，结果果然大赢特赢。 1962年他出版了《打败庄家（Beat the Dealer）》一书，向公众介绍了自己的算牌法。这不再是我们惯见的萝卜赌经，而是有数学基础的方法，因为它在不同的赢牌概率P（i）时下不同的赌注B (i），虽然总的胜利概率之和ΣP（i）仍然小于1/2，但只要在P（i)大时下大的B(i)，P(i)小时下小的B（i），就能使总回报ΣR（i）P （i）大于ΣB（i）。 “算10法”比较难操作，需要极高的心智和注意力。好在群众的智慧是无穷的，算牌手们沿着索普指定的方向走下 去，已经把算牌方法演进得越来越简单实用（索普本人在60年代后期就淡出了赌博界，带着他在赌场赢来的大笔资金，进入股票市场，运用他的数学知识，现在已 成为超级巨富）。 </p><p>我使用的是一种叫“高低法（High-Low）”的算牌法。在游戏过程中，我们把每一张出现的2，3，4，5，6都 算＋1点，7，8，9算0点，10，J，Q，K，A算－1点，将各点相加，结果越大，就表示前面出现过的小牌越多，对玩家越有利。反过来，如果结果是个负 数，就表示前面出过的大牌比小牌多，对庄家有利。</p><p>比如前面出现的牌是： </p><pre><code>4，9，10，5，J，A，8，10，Q，2，6，K，J，7 那么点数就是4张小牌减7张大牌，是－3。</code></pre><p>当然，在游戏过程中，你不可能叫庄家把牌局暂停，让你从容加减。你必须在每张牌出来时，就在心里默算点数。比如在上面的例子里，从第一张牌出现开始，<br>你就应该在心里默算出： </p><pre><code>1，1，0，1，0，－1，0，－2，－3，－2，－1，－2，－3，－3 </code></pre><p>在实际运用中，还可以采取两张牌一计的技巧，因为庄家发牌时一般速度较快，这样可以方便地把很多同时出现的大牌和小牌抵消不计，提高了算牌速度，减少了可能的计算错误。</p><p>比如在上面的例子里，如果两张牌一计，那就是： </p><pre><code>1，1，－1，－2，－2，－2，－3 </code></pre><p>如果是一副牌，－3已经是很糟糕的点数了，这时应该下最小注，或者停止不玩。不过一般来说，现在的赌场都使用六到八副牌，那么在六副牌312张牌内，发出14张牌，还剩298张牌，平均每副牌的点数是（－3）×52/298＝－0.5，还算可以忍受。 显然，在每一盒牌（“盒（shoe）”是指一盒牌从开始发牌到洗牌的过程，这一盒牌里可能有六副、四副、八副或其他 副数的牌）的开始，由于大部分牌还未发出，因此平均点数总是在0左右。要到牌盒里剩下的牌不多时，平均点数才可能比较显著地偏离0。所以算牌手在算牌时都 会寻找合适的赌桌，一方面要找人少的桌子，因为人越少，你在单位时间内玩的次数越多，实际收益才会更逼近期望值；另一方面要找切牌少的发牌员，因为该切多 少牌，赌场只有个大概的规定，具体执行还是要靠发牌员的觉悟，所以同一家赌场里，不同的发牌员切出的牌来常会差很多。 在点数变大时，该怎么提高赌注，每个算牌手都有自己的习惯和算度。贝尔实验室的J.L.Kelly推导出，在理论上，如果你占A的优势，本钱总数为R，那么最优赌注是B = A * R。 比如你有一万块钱的本钱，现在你占1%的优势，那么就应该在这把压下一百块钱。这种下注法称为Kelly法，是在理论上可以获得最大回报的方法。但在实践中，Kelly法过于冒险，只可视为下注时的上限。 </p><p>斯坦福·王（Stanford Wong）在《二十一点的秘密(Blackjack Secrets）》里说，平均点数每高一点，可增加约0.5％的优势。他是二十一点算牌界里最有名的祖师爷级人物之一，甚至排在爱德华·索普之前，第一个 进入了“二十一点名人堂（Blackjack Hall of Fame）”。我第一次看到他的名字时，还以为他是个华裔，后来在电视上看到他，才发现他是个白人老头。斯坦福·王其实是他的艺名：他毕业于斯坦福大学， 再加上“王”这个很有气势的东方姓氏。他对中国文化好像很感兴趣，自己创办了一家出版社，就叫“Pi Yee”——念念看吧：什么？辟易？便宜？别数典忘祖了，人家这叫“牌艺出版社”！ </p><p>按照他的说法，在0点时，庄家占0.5％的优势。到了1点，双方差不多扯平。平均点数升到2时，玩家就已经占0.5％的优势，可以提高赌注了。如果按照Kelly法，平均点数为7时，玩家占3％的优势，就得将自己全部本钱的3％投进去，显然太过冒险了。 在点数为0或负数时，玩家应当下最小赌注。当然，最好是干脆不玩，坐等点数变正。早期的那些算牌手就是这么做的，但 现在的赌场里，从游弋在各桌间的桌面经理，到高悬在天花板上的监视器，都虎视耽耽地监视着每个赌徒的行为。如果总是点坏不压、点好猛压，还不如直接在脸上 写五个大字：“我是算牌手”，说不定还暴露得晚些。 </p><p>算牌本身并不难练，难的是和赌场的斗智斗勇。在《打败庄家》刚出版时，它轰动一时，很快成为畅销书，激励了无数赌徒 涌向赌场，一试身手。赌场对此大为恐慌，有些赌场甚至关闭了二十一点赌桌。但是，很快他们就又恢复了镇定，因为他们发现，涌来的大批赌徒中，只有极少数人 真正掌握了算牌法，其他大多数人只不过是一知半解、道听途说的萝卜。索普这本书为极少数人提供了打败庄家的方法，但对大多数人来说，实际效果却是个二十一 点的广告，让他们自以为也能够在二十一点上赢钱。这是个赌场梦寐以求的广告，是他们自己无论花多少钱都做不来的广告。 </p><p>在刚开始时，算牌还是个新鲜事物，没有这方面的法律规定，开赌场的又多是黑社会，一旦发现算牌手，一律当老千处理， 痛打一顿后扔到臭水沟里。后来大家总算对算牌达成了共识：这是样技术活儿，是在遵守赌场规则的情况下，靠自己的聪明才智来赌博的一种方式；同时各大赌场也 多被华尔街的金融巨头接管，开始西装领带的管理方式，摆开堂堂之阵来赚钱，于是算牌手总算不再有人身危险，但赌场既然是人家的私有财产，就有权把某些他们 不欢迎的人拒之门外。因此，对一个算牌手来说，难的不是算牌，而是如何不被赌场发现。 同时，赌场也巧妙地改变了规则，比如用八副牌代替一副牌，牌发到一半时就重新洗牌，不准在一局牌的中间加入赌局等 等，极大地增加了算牌的难度。</p><p>他们逐渐稳住阵脚后，便大开二十一点赌桌，从此二十一点就取代了“蟹赌（Crap）”，成为赌场里最热门的游戏。但在算牌法 已经发明了四十多年后的今天，我们在二十一点赌桌上见到的，仍然大多数是萝卜。</p><h5 id="js简易代码实现"><a href="#js简易代码实现" class="headerlink" title="js简易代码实现"></a>js简易代码实现</h5><p>1.方法一</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">cc</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 请把你的代码写在这条注释以下</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>      count <span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'J'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'K'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token punctuation">:</span>      count <span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> count<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token string">"Bet"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> count<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token string">"Hold"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> count<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token string">"Hold"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token string">'K'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-5</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-5</span></code></pre><p>2.1.方法二</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">cc</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 请把你的代码写在这条注释以下</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>      count <span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'J'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'K'</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token punctuation">:</span>      count <span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> count<span class="token operator">+</span><span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span><span class="token string">' Bet'</span><span class="token punctuation">:</span><span class="token string">' Hold'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token string">'K'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-5</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-5</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天行九歌中自己喜欢的句子</title>
      <link href="/2018/03/24/tian-xing-jiu-ge/"/>
      <url>/2018/03/24/tian-xing-jiu-ge/</url>
      
        <content type="html"><![CDATA[<p>1、不敢妄言是懂得分寸</p><p>2、剑分三等，庶人之剑、诸侯之剑、天子之剑 —-韩非</p><p>3、没有根据的猜测反而有可能会被误导 —-卫庄</p><p>4、红莲：你要走了？ 卫庄：我要去赴一个约。 红莲：你还会回来吗？ 卫庄：也许不会。</p><p>红莲：哥，你要去哪里？ 韩非：秦国。 红莲：哥，你还会回来吗？ 韩非：放心吧，一定会的。</p><p>…… 说好不回来的，回来了。 说好回来的，却再也回不来了……</p><p>5、也许我该出发了！ —-韩非</p><p>6、“天地之法执行不怠，即便没有国家的依存。”</p><p>“法的贯彻正是为了安国定邦。”</p><p>“术以知奸……”</p><p>“以刑止刑……”</p><p>“这，就是流沙！”</p><p>7、想见我、或不想见我的人.终究还是会再见面</p><p>8、强者可以随时改变规则，而弱者跟本没有资格来制定规则。 —-姬无夜</p><p>9、天子已死</p><p>诸王纷争</p><p>逐鹿中原</p><p>乱世七雄</p><p>春秋逝远</p><p>寒冬将至</p><p>天下无常</p><p>聚散流沙</p><p>逝者如川</p><p>天行九歌</p><p>10、子房，你真是宝。哈哈哈，如果你是个女人，我一定把你娶回家。 —-韩非</p><p>11、有形的生命的确非常脆弱，但无形的力量就会坚不可破，天地之法，执行不怠，我给这股无力的力量起了一个名字叫做——流沙。</p><p>12、韩非：子房，你真是宝。哈哈哈，如果你是个女人，我一定要把你娶回家。</p><p>张良：幸好我是男人。</p><p>13、秦时升明月，天行颂九歌。</p><p>14、不管愿不愿意我们都置身在这个名为天下的权利漩涡之中，这已经无法改变。天地之法执行不怠有形的生命的确非常脆弱。但是无形的力量就会坚不可破。我给这股无形的力量起了一个名字叫做流沙 —-韩非子</p><p>15、七国的天下 我要九十九 —-韩非</p><p>16、向黑暗走去的人，或许会被黑暗吞噬，或许会被化作明灯。 —-水云歌</p><p>17、功勋的本身是用枯骨垒起的。</p><p>18、世间本没有相思，奈何离分人世，将痴心种出了果实。 —-断相离</p><p>19、问题是，为什么你会有女人就不是对手的可笑错觉呢！ —-紫女</p><p>20、这世上的事情，有的时候看似有利实则无利，看似劣势却是优势 —-韩非</p><p>21、从今天起，韩国，将由恐惧来统治。 —-血衣候 白亦非</p><p>22、请君三尺剑</p><p>烽火城头沥肝胆</p><p>借君三十年</p><p>繁华万里好江山</p><p>23、墨鸦</p><p>无言最是柔情客,长恨此身不由我。</p><p>忽见孤光照寒夜,雏凤清鸣笑意多。 —-墨鸦</p><p>24、新的韩国，不要做第三，看似占尽优势，其实注定死亡的人，也不要在第二个，得了一点蝇头小利而苟活之人。</p><p>25、世上只有两种承诺，一个是骗自己的，一种是以为能骗住别人的</p><p>26、你如果不是疯子，就是有胆子</p><p>27、此生何用声声叹，道不尽流年，看流沙聚散，回首天涯路远；英雄何用声声叹，断碑落残垣，君不见青山，豪杰冢化尘烟。</p><p>28、他们做的事情如果算是一首诗，那必定是一首血腥无比的诗。 —-紫女</p><p>29、水太深的地方会隐藏太多的真相，只有等潮水退去，才能够看清楚那些不为人知的杂草和暗礁。 —-卫庄</p><p>30、此生何用声声叹</p><p>道不尽流年</p><p>看流沙聚散</p><p>回首天涯路远</p><p>31.乌云遮蔽了整个天空，闪电便已在其中酝酿。——飞行的河马<br>32.世界上只有两种秘密，骗自己的和以为能骗住别人的。——默默<br>33.身不由己的抉择是痛苦的，你看似自己做了决定，但做决定的始终是命运。——荒野猎人<br>34.越是充满诱惑的东西，往往会越致命，你是否还会选择？——刀无言<br>35.天空没有痕迹，风雨已在心中。——长路<br>36.天地之间的无形之力，也在无形之中改变着天地。——浮歌<br>37.在最深沉的夜里，连自己的影子都会离你而去。——江左煤狼<br>38.死亡能带走生命，却带不走生命的痕迹。——泡沫<br>39.空谷足音，听到的却是自己的心。——诸葛菲菲<br>40.行走在两个世界的边缘，得到更多。——毛穿云<br>41.不要随意翻动回忆，因为它是不可测的深渊。——吕洞宾拉小提琴<br>42.花开在天边，而我需要走过一路的荆棘。——折焰<br>43.想要看清雾中的景物，不能仅仅相信自己的眼睛。——飞鸟</p>]]></content>
      
      
      <categories>
          
          <category> 名句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生格言 </tag>
            
            <tag> 名句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解身份证验证规则</title>
      <link href="/2018/03/21/shen-fen-zheng-yan-zheng/"/>
      <url>/2018/03/21/shen-fen-zheng-yan-zheng/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/banner/3.jpg" alt></p><blockquote><p>今天来说说身份证验证规则到底是怎么验证的，原理是什么，希望看完本篇你能正确的去理解身份证验证背后的规则。</p></blockquote><h3 id="身份证号码的编码规则"><a href="#身份证号码的编码规则" class="headerlink" title="身份证号码的编码规则"></a>身份证号码的编码规则</h3><blockquote><p>身份证号码共18位，由17位本体码和1位校验码组成。</p></blockquote><p>身份证最后一位是根据前面十七位数字码，按照ISO 7064:1983.MOD 11-2校验码计算出来的检验码。作为尾号的校验码，是由号码编制单位按统一的公式计算出来的，如果某人的尾号是0-9，都不会出现X，但如果尾号是10，那么就得用X来代替，因为如果用10做尾号，那么此人的身份证就变成了19位，而19位的号码违反了国家标准，并且我国的计算机应用系统也不承认19位的身份证号码。Ⅹ是罗马数字的10，用X来代替10，可以保证公民的身份证符合国家标准。</p><ol><li>前6位是地址码，表示登记户口时所在地的行政区划代码，依照《中华人民共和国行政区划代码》国家标准（GB/T2260）的规定执行；</li><li>7到14位是出生年月日，采用YYYYMMDD格式；</li><li>15到17位是顺序码，表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编订的顺序号，顺序码的奇数分配给男性，偶数分配给女性，即第17位奇数表示男性， 偶数表示女性；<br>第18位是校验码，采用ISO 7064:1983, MOD 11-2校验字符系统，计算规则下一章节说明。</li></ol><p>一代身份证与二代身份证的区别在于：</p><ol><li>一代身份证是15位，二代身份证是18位；</li><li>一代身份证出生年月日采用YYMMDD格式，二代身份证出生年月日采用YYYYMMDD格式；</li><li>一代身份证无校验码，二代身份证有校验码。</li></ol><h3 id="校验码计算规则"><a href="#校验码计算规则" class="headerlink" title="校验码计算规则"></a>校验码计算规则</h3><p>身份证号码中各个位置上的号码字符值应满足下列公式的校验：</p><img src="/medias/sfzyz/gs.png" width="40%"><img src="/medias/sfzyz/gs1.png" width="60%"><img src="/medias/sfzyz/biaosi.png" width="60%"><p>下面通过两种方法用某个真实的男性身份证号<code style="color:red;"><strong>(5 3 3 2 2 3 1 9 6 3 0 1 0 5 0 9 1 7)</strong></code>来进行通俗易懂的说明身份证验证规则。</p><blockquote><p>方法一（余数对应法）</p></blockquote><p><img src="/medias/sfzyz/guochen.png" alt="余数对应法"></p><ol><li>将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：<strong>7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2</strong>;</li><li>将这17位数字和系数相乘的结果相加；</li><li>用加出来的和除以<strong>11</strong>，看余数是多少；</li><li>余数只可能有<strong>0 1 2 3 4 5 6 7 8 9 10</strong>这11个数字。其分别对应的最后一位身份证的号码为<strong>1 0 X 9 8 7 6 5 4 3 2</strong>；<ul><li>首先：我们计算5 X 7 + 3 X 3 + 3 X 10+2 X 5+…+1 X 2，前17位的乘积和是<strong>258</strong></li><li>然后：用<strong>258</strong>除以<strong>11</strong>得出余数是<strong>5</strong></li><li>最后：通过对应规则就可以知道余数<strong>5</strong>对应的数字是<strong>7</strong>。所以，<strong>这是一个合格的身份证号码</strong>。</li></ul></li></ol><blockquote><p>方法二（十八位加权余一法）</p></blockquote><p>按照18位来计算，第一位数的权重是07，第二位是09（见下表）序号从右向左，只要最后的加权和除以<strong>11</strong>，余数只要是<strong>1</strong>，那么身份证号码就是正确的。</p><p><img src="/medias/sfzyz/bg.png" alt="十八位加权余一法"></p><p><code><strong>注意</strong></code>：如果身份证号码第18位是X，那么就按10计算。</p><p>其中5 X 7=35,3 X 9=27,3 X 10=30，其余以此类推，<br>加权求和=35+27+30…..2+7=265;265 % 11其余数是1，<strong>所以这个号码是正确的</strong>。</p><h3 id="用JS实现二代身份证的验证"><a href="#用JS实现二代身份证的验证" class="headerlink" title="用JS实现二代身份证的验证"></a>用JS实现二代身份证的验证</h3><p>理解了原理和校验规则开始下手敲起来：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">/**   * 以下身份证验证适用于18位的二代身份证号码，身份证通常是由17位本体码和1位校验码组成。   **/</span>  <span class="token keyword">function</span> <span class="token function">validateIdCard</span><span class="token punctuation">(</span>idCard<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//15位和18位身份证号码的正则表达式</span>    <span class="token keyword">var</span> regIdCard <span class="token operator">=</span> <span class="token regex">/^(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)|(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$)$/</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果通过该验证，说明身份证格式正确，但准确性还需计算</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>regIdCard<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>idCard<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>idCard<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> idCardWi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将前17位加权因子保存在数组里</span>        <span class="token keyword">var</span> idCardY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这是除以11后，可能产生的11位余数、验证码，也保存成数组，10代表X</span>        <span class="token keyword">var</span> idCardWiSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用来保存前17位各自乖以加权因子后的总和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          idCardWiSum <span class="token operator">+</span><span class="token operator">=</span> idCard<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> idCardWi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> idCardMod <span class="token operator">=</span> idCardWiSum <span class="token operator">%</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算出校验码所在数组的位置</span>        <span class="token keyword">var</span> idCardLast <span class="token operator">=</span> idCard<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到最后一位身份证号码</span>        <span class="token comment" spellcheck="true">//如果等于2，则说明校验码是10，身份证号码最后一位应该是X</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>idCardMod <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>idCardLast <span class="token operator">==</span> <span class="token string">"X"</span> <span class="token operator">||</span> idCardLast <span class="token operator">==</span> <span class="token string">"x"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"身份证号码验证通过！"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"您输入的身份证号码有误！"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//用计算出的验证码与最后一位身份证号码匹配，如果一致，说明通过，否则是无效的身份证号码</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>idCardLast <span class="token operator">==</span> idCardY<span class="token punctuation">[</span>idCardMod<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"身份证号码验证通过！"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"您输入的身份证号码有误！"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"您输入的身份证格式不正确!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> inputs <span class="token operator">=</span><span class="token function">validateIdCard</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> ids <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>inputs<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>中华人民共和国居民身份证法</li><li>中华人民共和国国家标准 GB/T 2260-2007 中华人民共和国行政区划代码</li><li>中华人民共和国国家标准 GB 11643-1999 公民身份证号码</li><li>中华人民共和国国家标准 GB/T 17710-1999 数据处理 校验码系统</li><li>中华人民共和国国家标准 GB/T 17710-2008 信息技术 安全技术 校验字符系统</li><li>ISO 7064:1983 Data processing - Check character systems</li></ul>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 身份证验证 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中添加人体时间</title>
      <link href="/2018/02/11/hexo-zhong-tian-jia-ren-ti-shi-zhong/"/>
      <url>/2018/02/11/hexo-zhong-tian-jia-ren-ti-shi-zhong/</url>
      
        <content type="html"><![CDATA[<p>这是一个日本人做的类似于flash插件他用人体的各种姿势来表示时间，可以访问作者<a href="http://chabudai.org/blog/?p=59" target="_blank" rel="noopener">博客链接</a>因为是flash插件所以必须装有flash插件才能进行使用，而一般手机端是没有flash插件的所以手机端是不能使用。不过PC端就足够了，毕竟在移动端使用对性能有一定的影响。<br>废话不多说实现后效果如下：</p><p><img src="/medias/tonyon/rt.png" alt></p><p>插入的方法有两种：</p><blockquote><p>方法一</p></blockquote><p>直接引入以下JS将其插入到自己需要放的地方即可</p><p>代码实现：<br>透明背景</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script charset<span class="token operator">=</span><span class="token string">"Shift_JIS"</span> src<span class="token operator">=</span><span class="token string">"http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>代码实现：<br>白色背景（这个可以套个div把背景改成自己喜欢的颜色）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script charset<span class="token operator">=</span><span class="token string">"Shift_JIS"</span> src<span class="token operator">=</span><span class="token string">"http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><hr><blockquote><p>方法二</p></blockquote><p>在<code>Hexo\themes\你的主题\source\js</code>下任意创建一个honehone_clock_tr.js文件将以下代码复制进去</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/******************************************************************************    初期設定******************************************************************************/</span><span class="token keyword">var</span> swfUrl <span class="token operator">=</span> <span class="token string">"http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf"</span><span class="token punctuation">;</span><span class="token keyword">var</span> swfTitle <span class="token operator">=</span> <span class="token string">"honehoneclock"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 実行</span><span class="token function">LoadBlogParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/******************************************************************************    入力        なし    出力        document.writeによるHTML出力******************************************************************************/</span><span class="token keyword">function</span> <span class="token function">LoadBlogParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sUrl <span class="token operator">=</span> swfUrl<span class="token punctuation">;</span>    <span class="token keyword">var</span> sHtml <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    sHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0" width="160" height="70" id="'</span> <span class="token operator">+</span> swfTitle <span class="token operator">+</span> <span class="token string">'" align="middle">'</span><span class="token punctuation">;</span>    sHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;param name="allowScriptAccess" value="always" />'</span><span class="token punctuation">;</span>    sHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;param name="movie" value="'</span> <span class="token operator">+</span> sUrl <span class="token operator">+</span> <span class="token string">'" />'</span><span class="token punctuation">;</span>    sHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;param name="quality" value="high" />'</span><span class="token punctuation">;</span>    sHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;param name="bgcolor" value="#ffffff" />'</span><span class="token punctuation">;</span>    sHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;param name="wmode" value="transparent" />'</span><span class="token punctuation">;</span>    sHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;embed wmode="transparent" src="'</span> <span class="token operator">+</span> sUrl <span class="token operator">+</span> <span class="token string">'" quality="high" bgcolor="#ffffff" width="160" height="70" name="'</span> <span class="token operator">+</span> swfTitle <span class="token operator">+</span> <span class="token string">'" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" />'</span><span class="token punctuation">;</span>    sHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;/object>'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sHtml<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后将以下代码插入到需要插入的地方即可</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/honehone_clock_tr.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>如果想添加样式就在你插入到的地方套一个div进行修改就好</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人体时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Hexo+github搭建个人博客</title>
      <link href="/2018/02/10/yong-hexo-github-da-jian-ge-ren-bo-ke/"/>
      <url>/2018/02/10/yong-hexo-github-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><ol><li><a href="https://git-scm.com/" target="_blank" rel="noopener">安装git</a></li><li><a href="https://github.com" target="_blank" rel="noopener">注册一个GitHub</a></li><li><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">nodejs</a></li></ol><h2 id="2-目的"><a href="#2-目的" class="headerlink" title="2.目的"></a>2.目的</h2><ol><li>为发布代码到仓库建立安全连接，无SSH key否则无法发布。</li><li>为以后代码克隆做准备如果无SSH key，否则无法克隆。</li><li>为以后搭建一个博客做准备。</li></ol><h2 id="3-步骤"><a href="#3-步骤" class="headerlink" title="3.步骤"></a>3.步骤</h2><blockquote><h4 id="一、先配置SSH-key"><a href="#一、先配置SSH-key" class="headerlink" title="一、先配置SSH key"></a>一、先配置SSH key</h4></blockquote><h5 id="1-首先需要检查你电脑是否已经有-SSH-key"><a href="#1-首先需要检查你电脑是否已经有-SSH-key" class="headerlink" title="1. 首先需要检查你电脑是否已经有 SSH key"></a>1. 首先需要检查你电脑是否已经有 SSH key</h5><blockquote><p>鼠标右键点击运行 git Bash 客户端，输入如下代码：</p></blockquote><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/.ssh$ <span class="token function">ls</span></code></pre><blockquote><p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果以前未使用过GitHub可以跳过该步骤，如果以前使用过想重新配置可以检测并删除该文件。</p></blockquote><hr><h5 id="2-创建一个-SSH-key"><a href="#2-创建一个-SSH-key" class="headerlink" title="2.创建一个 SSH key"></a>2.创建一个 SSH key</h5><blockquote><p>在 git Bash 客户端运行以下代码，建议输入GitHub上的邮箱。</p></blockquote><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"your_email@example.com"</span></code></pre><p> 代码参数含义：</p><blockquote><p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p></blockquote><blockquote><p>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：</p></blockquote><pre class=" language-bash"><code class="language-bash">Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/c/Users/三叶雨/.ssh/id_rsa<span class="token punctuation">)</span>:</code></pre><blockquote><p>当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。</p></blockquote><blockquote><p>接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，记住不是github管理者的密码）当然可以不输入账号和密码，这样以后你发布代码时就不需要密码了。</p></blockquote><pre class=" language-bash"><code class="language-bash">Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/c/Users/三叶雨/.ssh/id_rsa<span class="token punctuation">)</span>:Created directory <span class="token string">'/c/Users/三叶雨/.ssh'</span><span class="token keyword">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:</code></pre><blockquote><p>接下来，就会显示如下代码提示，如：</p></blockquote><pre class=" language-bash"><code class="language-bash">Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> /c/Users/三叶雨/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /c/Users/三叶雨/.ssh/id_rsa.pub.The key fingerprint is:SHA256:xxxxxxxxxxxxxxxxxx xxxxxxxxxx@qq.comThe key's randomart image is:+---<span class="token punctuation">[</span>RSA 2048<span class="token punctuation">]</span>----+<span class="token operator">|</span>    o+           <span class="token operator">|</span><span class="token operator">|</span>   o. + <span class="token keyword">.</span>        <span class="token operator">|</span><span class="token operator">|</span>  <span class="token keyword">.</span> .o o<span class="token punctuation">..</span>. <span class="token keyword">.</span> E  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token punctuation">..</span>.xxxxoooo .<span class="token operator">=</span> <span class="token keyword">.</span>   <span class="token operator">|</span><span class="token operator">|</span>   *xxxxx. <span class="token operator">=</span>    <span class="token operator">|</span><span class="token operator">|</span>      <span class="token operator">|</span><span class="token operator">|</span>      <span class="token operator">|</span><span class="token operator">|</span>    +. + o o <span class="token keyword">.</span>   <span class="token operator">|</span><span class="token operator">|</span>      <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHAxxsx<span class="token punctuation">]</span>-----+</code></pre><blockquote><p>当你看到上面这段代码的收，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了。</p></blockquote><hr><h5 id="3-添加你的-SSH-key-到-github上面去"><a href="#3-添加你的-SSH-key-到-github上面去" class="headerlink" title="3. 添加你的 SSH key 到 github上面去"></a>3. 添加你的 SSH key 到 github上面去</h5><blockquote><p>首先登陆到githu，点击头像进入→Settings→SSH kyes→Add SSH key。点击 Add SSH key 按钮添加一个 SSH key</p></blockquote><pre class=" language-bash"><code class="language-bash">进入c:/Users/xxxx/.ssh/目录下，打开id_rsa.pub文件，全选复制公钥内容。</code></pre><blockquote><p>这里尽量用编辑器打开全选，将公钥粘贴到GitHub中Add an SSH key的key输入框，最后“Add Key”</p></blockquote><h5 id="4-配置全局账户"><a href="#4-配置全局账户" class="headerlink" title="4.配置全局账户"></a>4.配置全局账户</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"your_username"</span>$  <span class="token function">git</span> config --global user.email <span class="token string">"your_registered_github_Email"</span></code></pre><blockquote><p>设置邮箱地址(建议用注册giuhub的邮箱)</p></blockquote><h5 id="5-最后测试ssh-key是否配置成功。"><a href="#5-最后测试ssh-key是否配置成功。" class="headerlink" title="5.最后测试ssh key是否配置成功。"></a>5.最后测试ssh key是否配置成功。</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.comThe authenticity of host <span class="token string">'github.com (xx.xxx.188.xx)'</span> can't be established.RSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxx.Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>?</code></pre><blockquote><p>当看到以下内容时说明已经配置成功，怎么样是不是很简单呀，这样就可以把用git把代码发到仓库托管了，在GitHub上也可以免费托管自己的博客代码，这样就不用买服务器和域名了省去了很多麻烦。</p></blockquote><hr><blockquote><h4 id="二、在之前的前提下安装hexo"><a href="#二、在之前的前提下安装hexo" class="headerlink" title="二、在之前的前提下安装hexo"></a>二、在之前的前提下安装hexo</h4></blockquote><h5 id="1-首先安装hexo具体内容点击看官网"><a href="#1-首先安装hexo具体内容点击看官网" class="headerlink" title="1.首先安装hexo具体内容点击看官网"></a>1.<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">首先安装hexo</a>具体内容点击看官网</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g//$ hexo init blog//$ <span class="token function">cd</span> blog//可省略上面两步默认会在你所在该文件夹内生成$ <span class="token function">npm</span> install<span class="token punctuation">(</span>安装依赖<span class="token punctuation">)</span></code></pre><blockquote><p>会生成类似以下的根目录</p><pre class=" language-bash"><code class="language-bash">    ├── _config.yml    ├── package.json    ├── node_modules    ├── scaffolds    ├── <span class="token function">source</span>    <span class="token operator">|</span>   ├── _drafts    <span class="token operator">|</span>   └── _posts    └── themes</code></pre></blockquote><h5 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h5><blockquote><p>以下只是列举一些常用，具体配置还要根据你所下载的主题或官网来进行配置。</p></blockquote><pre class=" language-bash"><code class="language-bash">参数    描述title    网站标题subtitle    网站副标题description    网站描述author    您的名字language    网站使用的语言timezone    网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</code></pre><h5 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h5><blockquote><p>3.1新建一篇文章。 </p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span>//如 hexo new <span class="token string">"post title with whitespace"</span>//如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout参数代替。如果标题包含空格的话，请使用引号括起来。</code></pre></blockquote><blockquote><p>3.2生成静态文件。</p><pre class=" language-bash"><code class="language-bash">$ hexo g</code></pre></blockquote><blockquote><p>3.3启动服务器进行调试</p></blockquote><pre class=" language-bash"><code class="language-bash">$ hexo s</code></pre><hr><blockquote><h4 id="三、将hexo部署到GitHub上"><a href="#三、将hexo部署到GitHub上" class="headerlink" title="三、将hexo部署到GitHub上"></a>三、将hexo部署到GitHub上</h4></blockquote><h5 id="1-安装-hexo-deployer-git。"><a href="#1-安装-hexo-deployer-git。" class="headerlink" title="1.安装 hexo-deployer-git。"></a>1.安装 hexo-deployer-git。</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><h5 id="2-修改配置到你的GitHub地址上"><a href="#2-修改配置到你的GitHub地址上" class="headerlink" title="2.修改配置到你的GitHub地址上"></a>2.修改配置到你的GitHub地址上</h5><pre class=" language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: <span class="token operator">&lt;</span>repository url<span class="token operator">></span> <span class="token comment" spellcheck="true">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span>  branch: <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#published</span>  message: <span class="token punctuation">[</span>message<span class="token punctuation">]</span>  例如  deploy:  type: <span class="token function">git</span>  repo: git@github.com:huangjiangh/huangjiangh.github.io.git//必须是你的github地址  branch: master </code></pre><h5 id="3-最后部署发布"><a href="#3-最后部署发布" class="headerlink" title="3.最后部署发布"></a>3.最后部署发布</h5><pre class=" language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d</code></pre><blockquote><p>这里可能要输入你的GitHub用户名和密码照着输入就好了（记住输入密码时不会显示出来你直接输入按确定就好了）滴滴滴 搞定</p></blockquote><blockquote><p>注意：发布到GitHub上面之前一定要先选好自己喜欢的主题并需要配置且多次调试，需要准确无误之后再发布。</p></blockquote><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h5 id="免费搭建个人博客和网站"><a href="#免费搭建个人博客和网站" class="headerlink" title="免费搭建个人博客和网站"></a>免费搭建个人博客和网站</h5><ol><li><a href="https://github.com" target="_blank" rel="noopener">github</a>+<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">hexo</a>（国外的服务器的在国内访问可能有点慢，不过也还是够用。）</li><li><a href="https://gitee.com/" target="_blank" rel="noopener">码云</a>+<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">hexo</a>（国内的服务器所以速度快些）</li></ol><h5 id="付费搭建网站和博客（这种比较费时间和金钱）"><a href="#付费搭建网站和博客（这种比较费时间和金钱）" class="headerlink" title="付费搭建网站和博客（这种比较费时间和金钱）"></a>付费搭建网站和博客（这种比较费时间和金钱）</h5><blockquote><p>可以在腾讯云、阿里云、华为云买域名和服务器。</p></blockquote><blockquote><p>本人之前在阿里云买个用来测试的centos7.3版本，因为是学生有优惠（24岁之前都似为学生）所以域名加服务器才花了一百多，用来测试其实也够了。</p></blockquote><p>个人博客搭建</p><blockquote><p>我用过  <a href="http://www.bt.cn/" target="_blank" rel="noopener">宝塔面板</a>+<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">wordpres</a>  其他的也还有很多不过wordp主题是算比较多的了（因人而异吧）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在GitHub中添加SSH key密匙</title>
      <link href="/2018/02/07/zai-github-zhong-tian-jia-ssh-key-mi-chi/"/>
      <url>/2018/02/07/zai-github-zhong-tian-jia-ssh-key-mi-chi/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/banner/1.jpg" alt="时间对于每个人都是公平的"></p><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><ol><li><a href="https://git-scm.com/" target="_blank" rel="noopener">安装git</a></li><li><a href="https://github.com" target="_blank" rel="noopener">注册一个GitHub</a></li></ol><h2 id="2-目的"><a href="#2-目的" class="headerlink" title="2.目的"></a>2.目的</h2><ol><li>为发布代码到仓库建立安全连接，无SSH key否则无法发布。</li><li>为以后代码克隆做准备如果无SSH key，否则无法克隆。</li><li>为以后搭建一个博客做准备。</li></ol><h2 id="3-步骤"><a href="#3-步骤" class="headerlink" title="3.步骤"></a>3.步骤</h2><blockquote><p>通过以下以下5个步骤进行说明</p></blockquote><ol><li>首先需要检查你电脑是否已经有 SSH key <blockquote><p>鼠标右键点击运行 git Bash 客户端，输入如下代码：</p></blockquote></li></ol><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/.ssh$ <span class="token function">ls</span></code></pre><blockquote><p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果以前未使用过GitHub可以跳过该步骤，如果以前使用过想重新配置可以检测并删除该文件。</p></blockquote><hr><p>2.创建一个 SSH key</p><blockquote><p>在 git Bash 客户端运行以下代码，建议输入GitHub上的邮箱。</p></blockquote><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"your_email@example.com"</span></code></pre><p> 代码参数含义：</p><blockquote><p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p></blockquote><blockquote><p>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：</p></blockquote><pre class=" language-bash"><code class="language-bash">Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/c/Users/三叶雨/.ssh/id_rsa<span class="token punctuation">)</span>:</code></pre><blockquote><p>当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。</p></blockquote><blockquote><p>接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，记住不是github管理者的密码）当然可以不输入账号和密码，这样以后你发布代码时就不需要密码了。</p></blockquote><pre class=" language-bash"><code class="language-bash">Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/c/Users/三叶雨/.ssh/id_rsa<span class="token punctuation">)</span>:Created directory <span class="token string">'/c/Users/三叶雨/.ssh'</span><span class="token keyword">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:</code></pre><blockquote><p>接下来，就会显示如下代码提示，如：</p></blockquote><pre class=" language-bash"><code class="language-bash">Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> /c/Users/三叶雨/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /c/Users/三叶雨/.ssh/id_rsa.pub.The key fingerprint is:SHA256:xxxxxxxxxxxxxxxxxx xxxxxxxxxx@qq.comThe key's randomart image is:+---<span class="token punctuation">[</span>RSA 2048<span class="token punctuation">]</span>----+<span class="token operator">|</span>    o+           <span class="token operator">|</span><span class="token operator">|</span>   o. + <span class="token keyword">.</span>        <span class="token operator">|</span><span class="token operator">|</span>  <span class="token keyword">.</span> .o o<span class="token punctuation">..</span>. <span class="token keyword">.</span> E  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token punctuation">..</span>.xxxxoooo .<span class="token operator">=</span> <span class="token keyword">.</span>   <span class="token operator">|</span><span class="token operator">|</span>   *xxxxx. <span class="token operator">=</span>    <span class="token operator">|</span><span class="token operator">|</span>      <span class="token operator">|</span><span class="token operator">|</span>      <span class="token operator">|</span><span class="token operator">|</span>    +. + o o <span class="token keyword">.</span>   <span class="token operator">|</span><span class="token operator">|</span>      <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHAxxsx<span class="token punctuation">]</span>-----+</code></pre><blockquote><p>当你看到上面这段代码的收，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了。</p></blockquote><hr><ol start="3"><li>添加你的 SSH key 到 github上面去<blockquote><p>首先登陆到githu，点击头像进入→Settings→SSH kyes→Add SSH key。点击 Add SSH key 按钮添加一个 SSH key</p></blockquote></li></ol><pre class=" language-bash"><code class="language-bash">进入c:/Users/xxxx/.ssh/目录下，打开id_rsa.pub文件，全选复制公钥内容。</code></pre><blockquote><p>这里尽量用编辑器打开全选，将公钥粘贴到GitHub中Add an SSH key的key输入框，最后“Add Key”</p></blockquote><p>4.配置全局账户</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"your_username"</span>$  <span class="token function">git</span> config --global user.email <span class="token string">"your_registered_github_Email"</span></code></pre><blockquote><p>设置邮箱地址(建议用注册giuhub的邮箱)</p></blockquote><p>5.最后测试ssh key是否配置成功。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.comThe authenticity of host <span class="token string">'github.com (xx.xxx.188.xx)'</span> can't be established.RSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxx.Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>?</code></pre><blockquote><p>当看到以下内容时说明已经配置成功，怎么样是不是很简单呀，这样就可以把用git把代码发到仓库托管了，在GitHub上也可以免费托管自己的博客代码，这样就不用买服务器和域名了省去了很多麻烦。</p></blockquote><hr><h5 id="免费搭建个人博客和网站"><a href="#免费搭建个人博客和网站" class="headerlink" title="免费搭建个人博客和网站"></a>免费搭建个人博客和网站</h5><ol><li><a href="https://github.com" target="_blank" rel="noopener">github</a>+<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">hexo</a>（国外的服务器的在国内访问可能有点慢，不过也还是够用。）</li><li><a href="https://gitee.com/" target="_blank" rel="noopener">码云</a>+<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">hexo</a>（国内的服务器所以速度快些）</li></ol><h5 id="付费搭建网站和博客（这种比较费时间和金钱）"><a href="#付费搭建网站和博客（这种比较费时间和金钱）" class="headerlink" title="付费搭建网站和博客（这种比较费时间和金钱）"></a>付费搭建网站和博客（这种比较费时间和金钱）</h5><blockquote><p>可以在腾讯云、阿里云、华为云买域名和服务器。</p></blockquote><blockquote><p>本人之前在阿里云买个用来测试的centos7.3版本，因为是学生有优惠（24岁之前都似为学生）所以域名加服务器才花了一百多，用来测试其实也够了。</p></blockquote><p>个人博客搭建</p><blockquote><p>我用过  <a href="http://www.bt.cn/" target="_blank" rel="noopener">宝塔面板</a>+<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">wordpres</a>  其他的也还有很多不过wordp主题是算比较多的了（因人而异吧）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> ssh key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纽约比加州时间早3个小时s</title>
      <link href="/2018/01/06/niu-yue-bi-jia-zhou-shi-jian-zao-3-ge-xiao-shi/"/>
      <url>/2018/01/06/niu-yue-bi-jia-zhou-shi-jian-zao-3-ge-xiao-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/banner/8.jpg" alt="New York"></p><p>New York is 3 hours ahead of California,</p><blockquote><p>纽约时间比加州时间早三个小时，</p></blockquote><p>but it does not make California slow.</p><blockquote><p>但加州时间并没有变慢。</p></blockquote><p>Someone graduated at the age of 22,</p><blockquote><p>有人22岁就毕业了，</p></blockquote><p>but waited 5 years before securing a good job!</p><blockquote><p>但等了五年才找到好的工作！</p></blockquote><p>Someone became a CEO at 25,</p><blockquote><p>有人25岁就当上CEO，</p></blockquote><p>and died at 50.</p><blockquote><p>却在50岁去世。</p></blockquote><p>While another became a CEO at 50,</p><blockquote><p>也有人到50岁才当上CEO，</p></blockquote><p>and lived to 90 years.</p><blockquote><p>然后活到90岁。</p></blockquote><p>Someone is still single,</p><blockquote><p>有人依然单身，</p></blockquote><p>while someone else got married.</p><blockquote><p>同时也有人已婚。</p></blockquote><p>Obama retires at 55,</p><blockquote><p>奥巴马55岁就退休，</p></blockquote><p>but Trump starts at 70.</p><blockquote><p>川普70岁才开始当总统。</p></blockquote><p>Absolutely everyone in this world works based on their Time Zone.</p><blockquote><p>世上每个人本来就有自己的发展时区。</p></blockquote><p>People around you might seem to go ahead of you,</p><blockquote><p>身边有些人看似走在你前面，</p></blockquote><p>some might seem to be behind you.</p><blockquote><p>也有人看似走在你后面。</p></blockquote><p>But everyone is running their own RACE, in their own TIME.</p><blockquote><p>但其实每个人在自己的时区有自己的步程。</p></blockquote><p>Don’t envy them or mock them.</p><blockquote><p>不用嫉妒或嘲笑他们。</p></blockquote><p>They are in their TIME ZONE, and you are in yours!</p><blockquote><p>他们都在自己的时区里，你也是！</p></blockquote><p>Life is about waiting for the right moment to act.</p><blockquote><p>生命就是等待正确的行动时机。</p></blockquote><p>So, RELAX.</p><blockquote><p>所以，放轻松。</p></blockquote><p>You’re not LATE.</p><blockquote><p>你没有落后。</p></blockquote><p>You’re not EARLY.</p><blockquote><p>你没有领先。</p></blockquote><p>You are very much ON TIME, and in your TIME ZONE Destiny set up for you.</p><blockquote><p>在命运为你安排的属于自己的时区里，一切都准时。</p></blockquote><p><img src="/medias/featureimages/%E5%94%90%E4%BA%BA%E8%A1%97.gif" alt="New York"></p>]]></content>
      
      
      <categories>
          
          <category> 诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS函数类型</title>
      <link href="/2017/12/19/2.js-han-shu-lei-xing/"/>
      <url>/2017/12/19/2.js-han-shu-lei-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="function类型"><a href="#function类型" class="headerlink" title="function类型"></a>function类型</h4><p><strong>1.构造函数(函数是对象，函数名是指针)</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"num1"</span><span class="token punctuation">,</span> <span class="token string">"num2"</span><span class="token punctuation">,</span> <span class="token string">"return num1 + num2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不推荐</span></code></pre><p><strong>2.没有重载(深入理解)</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">adds</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">adds</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">adds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//300(后覆盖前面的)</span><span class="token keyword">var</span> adds <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span> adds <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">adds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//300(后覆盖前面的)</span></code></pre><p><strong>3.函数声明与函数表达式</strong></p><blockquote><p>解释器会率先读取函数声明,函数表达式必须等到解释器执行到它所在的代码行,才会真正被解释执行.此例子中函数声明被提升到了顶部进行求职运算.</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span>将函数声明改为等价表达式<span class="token function">运行错误</span><span class="token punctuation">(</span>原因在于函数位于一个初始化函数语句中，而不是一个函数声明<span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>4.作为值的函数</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">call</span><span class="token punctuation">(</span>somefunction<span class="token punctuation">,</span> somear<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">somefunction</span><span class="token punctuation">(</span>somear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">add10</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> result1 <span class="token operator">=</span> <span class="token function">callsome</span><span class="token punctuation">(</span>add10<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//?</span><span class="token keyword">function</span> <span class="token function">areatefunction</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>Object1<span class="token punctuation">,</span>Object2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> value1 <span class="token operator">=</span> Object1<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> value2 <span class="token operator">=</span> Object2<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">></span> value2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"hjh"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token string">"23"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"nba"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>datas<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">areatefunction</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>datas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hjh</span>datas<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">areatefunction</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>datas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//23</span></code></pre><p><strong>5.函数内部属性</strong></p><p>arguments(包含传入函数中的所有参数);<br>this</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> JS高级程序设计 </tag>
            
            <tag> 函数类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS事件处理程序</title>
      <link href="/2017/11/24/3.js-shi-jian-chu-li-cheng-xu/"/>
      <url>/2017/11/24/3.js-shi-jian-chu-li-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h4 id="DOM0级事件处理程序"><a href="#DOM0级事件处理程序" class="headerlink" title="DOM0级事件处理程序"></a>DOM0级事件处理程序</h4><blockquote><ol><li>用onclick添加事件</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        exmple<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"#2C3E50"</span><span class="token punctuation">;</span>        exmple<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h4 id="DOM1级事件处理程序"><a href="#DOM1级事件处理程序" class="headerlink" title="DOM1级事件处理程序"></a>DOM1级事件处理程序</h4><blockquote><ol><li>用addEventListener 接收三个参数（“要处理的事件名”， 作为事件处理的函数， 一个布尔值布尔值true表示在捕获阶段调用事件处理程序，false反之。）添加事件.</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    exmple<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span><span class="token string">"#42B983"</span><span class="token punctuation">;</span>    exmple<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span><span class="token string">".4"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    exmple<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span><span class="token string">"#42B983"</span><span class="token punctuation">;</span>    exmple<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span><span class="token string">".4"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><blockquote><ol start="2"><li>removeEventListener(与传入的时参数相同，因为匿名函数无法删除，所以函数必须不是匿名函数，必须向以下这样函数要有个名字。)</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> hadel <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    exmple<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">;</span>    exmple<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> hadel<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> hadel<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><h4 id="跨浏览器事件处理程序"><a href="#跨浏览器事件处理程序" class="headerlink" title="跨浏览器事件处理程序"></a>跨浏览器事件处理程序</h4><blockquote><ol><li>EventUtil.addHandler接收三个参数(“要操作的元素”， “事件名称”， ‘事件处理程序函数)</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> EventUtil <span class="token operator">=</span> <span class="token punctuation">{</span>        addHandler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                element<span class="token punctuation">[</span><span class="token string">"on"</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> handler<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        removeHandler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                element<span class="token punctuation">[</span><span class="token string">"on"</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用</span>    <span class="token keyword">const</span> exmple <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"exmple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> hadel <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> hadel<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 事件处理程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS高级程序设计 </tag>
            
            <tag> 事件处理程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON</title>
      <link href="/2017/11/24/json/"/>
      <url>/2017/11/24/json/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是JSON？"><a href="#什么是JSON？" class="headerlink" title="什么是JSON？"></a>什么是JSON？</h4><p>JSON它是一种数据格式，而不是一门编程语言，它利用了JavaScript中的一些模式来表示结构化数据，虽然看上去JSON和JavaScript具有相同的语法形式，但JSON并不属于JavaScript，而且诸多的语言都可以用JSON因为它只是一种数据格式，在JSON出现之前很长一段时间都以XML作为互联网上传输结构化数据的标准，之前的web服务器与服务器之间通信都是建立在XML之上的，然而不少人认为XML不易读而且过于繁琐、多余。还好在2006年Douglas Crockford将JSON作为一个标准提交给IETF，虽然在之前的2001年就已经开始使用，但在2006年后才慢慢被大家所喜欢。</p><h4 id="一、JSON语法"><a href="#一、JSON语法" class="headerlink" title="一、JSON语法"></a>一、JSON语法</h4><blockquote><p>JSON可以表示为以下三种类型值</p></blockquote><ol><li>简单值</li></ol><blockquote><p>可用JavaScript语法表示JSON,如字符串、数值、布尔值、null但不支持特殊的undefined。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token number">5</span>“helloworld”</code></pre><ol start="2"><li>对象</li></ol><blockquote><p>对象作为复杂的数据类型，用一组无序的键值对来表示出复杂的JSON数据。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span>  object <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>                <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>                <span class="token string">"work"</span><span class="token punctuation">:</span><span class="token string">"web全栈"</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>数组</li></ol><blockquote><p>数组也是复杂的数据类型，它用一组有序的值来表示出复杂的JSON数据，它可以通过下标来访问其中的值。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token punctuation">[</span> <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"22"</span><span class="token punctuation">,</span>    <span class="token string">"aothing"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"hhj"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"fx"</span><span class="token punctuation">:</span><span class="token string">"fg"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"sanyeyu"</span>"<span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"22"</span><span class="token punctuation">,</span>    <span class="token string">"aothing"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"hhj"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"fx"</span><span class="token punctuation">:</span><span class="token string">"fg"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="二、JSON对象"><a href="#二、JSON对象" class="headerlink" title="二、JSON对象"></a>二、JSON对象</h4><ol><li>早期的JSON解析基本上都是用的JavaScript的 <code>eval()</code> 函数，因为JSON是JavaScript的子集，所以 <code>eval()</code><br>可以解析并返回JavaScript的对象和数组，但由于 <code>eval()</code>  对JSON数据结构求值存在风险，可能会执行一些恶意代码，对于不能原生支持JSON解析的浏览器，使用shim是最佳选择。</li></ol><ol start="2"><li>JOSN对象有两个方法 <code>stringify()</code> 和 <code>parse()</code>。</li></ol><blockquote><p><code>stringify()</code> 把JavaScript对象系列化为JSON字符串以便处理。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>                <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"22"</span><span class="token punctuation">,</span>                <span class="token string">"aothing"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"hhj"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">"fx"</span><span class="token punctuation">:</span><span class="token string">"fg"</span>             <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> jsontext <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsontext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//{"name":"sanyeyu","age":"22","aothing":[13,"hhj"],"fx":"fg"}</span></code></pre><blockquote><p><code>parse()</code>把JSON字符串解析为原生JavaScript值。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> hh <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsontext<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hh<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//{name: "sanyeyu", age: "22", aothing: Array(2), fx: "fg"}age: "22"aothing: (2) [13, "hhj"]fx: "fg"name: "sanyeyu"__proto__: Object</span></code></pre><h4 id="三、解析与序列化选项"><a href="#三、解析与序列化选项" class="headerlink" title="三、解析与序列化选项"></a>三、解析与序列化选项</h4><ol><li>过滤结果</li></ol><blockquote><p><code>stringify()</code> 方法的第二个参数是一个数组表示要过滤的属性。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>                    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"22"</span><span class="token punctuation">,</span>                    <span class="token string">"aothing"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"hhj"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">"fx"</span><span class="token punctuation">:</span><span class="token string">"fg"</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> jsontext <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"aothing"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsontext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//{"aothing":[13,"hhj"]}</span></code></pre><ol start="2"><li>字符串缩进</li></ol><blockquote><p><code>stringify()</code> 方法的第三个参数表示要缩进几个字符串，也可以填写其他符号，但缩进字符串不能超过10个字符串。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span>、添加数组<span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>                    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"22"</span><span class="token punctuation">,</span>                    <span class="token string">"aothing"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"hhj"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">"fx"</span><span class="token punctuation">:</span><span class="token string">"fg"</span>               <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> jsontext <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsontext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出</span>    <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span>        <span class="token string">"aothing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token number">13</span><span class="token punctuation">,</span>            <span class="token string">"hhj"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"fx"</span><span class="token punctuation">:</span> <span class="token string">"fg"</span>    <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span>添加其他符号<span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>                    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"22"</span><span class="token punctuation">,</span>                    <span class="token string">"aothing"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"hhj"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">"fx"</span><span class="token punctuation">:</span><span class="token string">"fg"</span>               <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> jsontext <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>“<span class="token punctuation">[</span><span class="token punctuation">]</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsontext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出</span><span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token string">"aothing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">13</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token string">"hhj"</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token string">"fx"</span><span class="token punctuation">:</span> <span class="token string">"fg"</span><span class="token punctuation">}</span></code></pre><h4 id="四、toJSON-方法"><a href="#四、toJSON-方法" class="headerlink" title="四、toJSON()方法"></a>四、toJSON()方法</h4><ol><li>有时候 <code>JSON.stringify()</code> 还是不能满足某些对象进行自定义序列化的需求，所以在某些特殊情况下可以给对象定义 <code>toJSON()</code> 方法，返回其自身的JSON数据格式。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>                    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"22"</span><span class="token punctuation">,</span>                    <span class="token string">"aothing"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"hhj"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">"fx"</span><span class="token punctuation">:</span><span class="token string">"fg"</span><span class="token punctuation">,</span>                    toJSON<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aothing<span class="token punctuation">;</span>               <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> jsontext <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsontext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出</span>    <span class="token punctuation">[</span>        <span class="token number">13</span><span class="token punctuation">,</span>        <span class="token string">"hhj"</span>    <span class="token punctuation">]</span></code></pre><ol start="2"><li><code>JSON.parse()</code>方法也可以接收另一个参数，该参数是一个函数，将在每个键值对上调用，为了区别于<code>JSON.stringify()</code> 接收的过滤函数，它被称为还原函数，但它们都基本上是相同的，都接收两个参数，键和值而且都需要返回一个值.<br> 如果还原函数返回undefined，则表示要从结果中删除相应的键，如果返回其他值，则将该值插入到结果中去，一般在将日期转换为Date对象时，经常要用到还原函数。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>                    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"22"</span><span class="token punctuation">,</span>                    <span class="token string">"aothing"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"hhj"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">"fx"</span><span class="token punctuation">:</span><span class="token string">"fg"</span><span class="token punctuation">,</span>                    year<span class="token punctuation">:</span><span class="token number">2017</span><span class="token punctuation">,</span>                    redate<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// toJSON: function(){</span>                    <span class="token comment" spellcheck="true">//     return this.age;</span>                    <span class="token comment" spellcheck="true">// }</span>               <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> jsonText <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obbook <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonText<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">"redate"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obbook<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出</span><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"sanyeyu"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span>    <span class="token string">"aothing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token number">13</span><span class="token punctuation">,</span>    <span class="token string">"hhj"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"fx"</span><span class="token punctuation">:</span> <span class="token string">"fg"</span><span class="token punctuation">,</span>    <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2017</span><span class="token punctuation">,</span>    <span class="token string">"redate"</span><span class="token punctuation">:</span> <span class="token string">"2017-10-31T16:00:00.000Z"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS高级程序设计 </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组方法</title>
      <link href="/2017/06/06/1.js-shu-zu-fang-fa/"/>
      <url>/2017/06/06/1.js-shu-zu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="javascript中一些常用方法"><a href="#javascript中一些常用方法" class="headerlink" title="javascript中一些常用方法"></a>javascript中一些常用方法</h4><p>今天就来说说JS中常用的一些方法，这些方法在日常的开发中是必不可少的，而且这些方法也是一个基础，我们来一起回顾一下。</p><h4 id="1-栈方法"><a href="#1-栈方法" class="headerlink" title="1.栈方法"></a>1.栈方法</h4><blockquote><p>栈数据结构的方法是LIFO（后进先出)也就是最先添加的最先被移除发生在栈的顶部。</p></blockquote><blockquote><p>push()将任意数量添加到数组末尾,返回新的的数组长度。</p></blockquote><blockquote><p>pop()方法用来“抛出”一个数组末尾的值。我们可以把这个“抛出”的值赋给一个变量存储起来。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个数组</span><span class="token keyword">var</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//推入两项</span><span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//推入另一项</span><span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span class="token keyword">var</span> item <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取得最后一项</span><span class="token function">alert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"black"</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span></code></pre><h4 id="2-队列方法"><a href="#2-队列方法" class="headerlink" title="2.队列方法"></a>2.队列方法</h4><blockquote><p>队列数据结构的访问规则是FIFO (先进先出)队列在列表的添加项，从列表的前端移除项。</p></blockquote><blockquote><p>.shift() 就是专门用来处理这类型需求的。它的工作原理类似 .pop()，但它移除的是第一个元素，而不是最后一个。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">和shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法结合<span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个数组</span><span class="token keyword">var</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//推入两项</span><span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//推入另一项</span><span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span class="token keyword">var</span> item <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取得第一项</span><span class="token function">alert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//red</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span></code></pre><blockquote><p>.unshift() 方法用起来就像 .push() 方法一样, 但不是在数组的末尾添加元素，而是在数组的头部添加元素。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个数组</span><span class="token keyword">var</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//推入两项</span><span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//推入另一项</span><span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span class="token keyword">var</span> item <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取得第一项</span><span class="token function">alert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//blue</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span></code></pre><h4 id="3-重排序方法"><a href="#3-重排序方法" class="headerlink" title="3.重排序方法"></a>3.重排序方法</h4><blockquote><p>reverse()反转数组的顺序。</p></blockquote><blockquote><p>sort()升序降序，此方法后台会调用toString()方法进行对比。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//5,4,3,2,1</span></code></pre><blockquote><p>升序</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果第一个参数应该位与第二个之前返回负数</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">></span> value2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果第一个参数应该位与第二个之后返回正数</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果相等返回0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1232</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">]</span>values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// -1,10,23,56,87,100,1232</span></code></pre><blockquote><p>降序</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果第一个参数应该位与第二个之后返回负数</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">></span> value2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果第一个参数应该位与第二个之前返回负数</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果相等返回0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1232</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">]</span>values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1232,100,87,56,23,10,-1</span></code></pre><p><code>推荐使用</code></p><blockquote><p>升序</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//4,5,9,19,20,23,89,100</span></code></pre><blockquote><p>降序</p></blockquote><pre class=" language-javascript"><code class="language-javascript">values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> b<span class="token operator">-</span>a<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//100,89,23,20,19,9,5,4</span></code></pre><h4 id="4-操作方法"><a href="#4-操作方法" class="headerlink" title="4.操作方法"></a>4.操作方法</h4><blockquote><p>concat()方法允许您连接数组并创建一个全新的数组,concat <code>操作不会影响原始数组</code> - 它会将所产生的连接作为新数组返回。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> colors1 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"black"</span><span class="token punctuation">,</span><span class="token string">"brown"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//red,green,blue</span><span class="token function">alert</span><span class="token punctuation">(</span>colors1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//red,green,blue,yellow,black,brown</span></code></pre><blockquote><p>slice()基于当前数组中的一个或多个项创建一个新数组,它接收一个或两个参数,即要返回项的起始和结束位置，<code>不会影响原始数组</code>。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token string">"black"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> colors2 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> colors3 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>colors2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//green,blue,yellow,black</span><span class="token function">alert</span><span class="token punctuation">(</span>colors3<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//green,blue,yellow</span></code></pre><blockquote><p>splice()最强大的方法(删除，插入，替换)。</p></blockquote><blockquote><p>删</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token string">"black"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> colors2 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从第一位开始删除三位</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//yellow,black</span><span class="token function">alert</span><span class="token punctuation">(</span>colors2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//red,green,blue</span></code></pre><blockquote><p>增</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token string">"black"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> colors2 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从第一位开始插入三位</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//red,green,blue,green,blue,yellow,black</span><span class="token function">alert</span><span class="token punctuation">(</span>colors2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span></code></pre><blockquote><p>替换</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token string">"black"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> colors2 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"greensss"</span><span class="token punctuation">,</span><span class="token string">"hjh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从第一位之后删除一位插入三位</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//red,greensss,hjh,yellow,black</span><span class="token function">alert</span><span class="token punctuation">(</span>colors2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//green,blue</span></code></pre><h4 id="5-位置方法"><a href="#5-位置方法" class="headerlink" title="5.位置方法"></a>5.位置方法</h4><blockquote><p>indexOf()从头开始查找,该方法将从头到尾地检索数组，看它是否含有对应的元素。返回第一次出现该元素的位置。如果在数组中没找到指定元素则返回 -1。</p></blockquote><blockquote><p>lastIndexOf()从末尾查找。</p></blockquote><blockquote><p>两者在未找到时返回-1,在比较是用全等(===)。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token function">alert</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span><span class="token function">alert</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//-1</span><span class="token function">alert</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2   </span><span class="token function">alert</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//6</span></code></pre><h4 id="6-迭代方法"><a href="#6-迭代方法" class="headerlink" title="6.迭代方法"></a>6.迭代方法</h4><blockquote><p>都接收两个参数</p></blockquote><blockquote><p>传入这些方法中的函数会接收三个参数(数组项的值，该项在数组中的位置，数组对象本身)。</p></blockquote><p>1.every()<br>2.some()<br>3.filter()<br>4.forEach()<br>5.map()</p><blockquote><p>这些方法都不会修改数组中的包含值。</p></blockquote><blockquote><p>(item表数组项的值，index表该项在数组中的位置，array表数组对象本身)。</p></blockquote><p><code>every()真真为真，真假为假。</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> everyResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对于该函数来说,传入的函数必须对每一项都返回true,这个方法才返回true,反之.</span><span class="token comment" spellcheck="true">//该函数对每一项都返回true,则返回true.</span><span class="token function">alert</span><span class="token punctuation">(</span>everyResult<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span></code></pre><blockquote><p>而该函数只要传入的函数对数组之后得某一项返回true,就会返回true。</p></blockquote><p><code>some()真假为真，真真为真。</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> someResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果函数对任一项返回true,则返回true.</span><span class="token function">alert</span><span class="token punctuation">(</span>someResult<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span></code></pre><p><code>filter()返回真的数组。</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> filterResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>filterResult<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3,4,5,6,5,4,3</span></code></pre><p><code>map()返回每次函数调用结果组成的数组。</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mapResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//return (item * 2)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>mapResult<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2,4,6,8,10,12,10,8,6,4,2,0</span><span class="token comment" spellcheck="true">//alert(mapResult)//false,false,true,true,true,true,true,true,true,false,false,false</span></code></pre><p><code>forEach()返回每次函数调用结果组成的数组。</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mapResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//return (item * 2)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//无返回值类似for循环迭代数组一样</span><span class="token function">alert</span><span class="token punctuation">(</span>mapResult<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span></code></pre><h4 id="7-归并方法"><a href="#7-归并方法" class="headerlink" title="7.归并方法"></a>7.归并方法</h4><blockquote><p>reduce()从头开始遍历。</p></blockquote><blockquote><p>reduceRight()从末尾开始遍历。</p></blockquote><blockquote><p>两者都接收两个参数:一个在每一项上调用的函数和(可选)作为归并基础的初始值。</p></blockquote><blockquote><p>函数接收四个参数:前一个值/当前值/项的索引值/数组对象  这个函数返回的任何值都会作为第一个参数自动传给下一项。</p></blockquote><blockquote><p>两者都会迭代数组所有项,然后构建一个最终返回的值。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> sum <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//15</span><span class="token keyword">var</span> sum <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//15</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数组方法 </tag>
            
            <tag> JS高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用SVG实现简单的文字描边重绘</title>
      <link href="/2017/02/06/svg/"/>
      <url>/2017/02/06/svg/</url>
      
        <content type="html"><![CDATA[<p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics),SVG 是使用 XML 来描述二维图形和绘图程序的语言。<br>本篇内容只介绍一些本次实例要用到的属性具体请看 <a href="https://www.w3cschool.cn/svg/svg-tutorial.html" target="_blank" rel="noopener">W3cschool</a> 。</p><h5 id="1-需要以下语言配合配合实现："><a href="#1-需要以下语言配合配合实现：" class="headerlink" title="1. 需要以下语言配合配合实现："></a>1. 需要以下语言配合配合实现：</h5><ul><li>HTML5</li><li>CSS3</li><li>javascript</li></ul><h5 id="2-它的优势主要有："><a href="#2-它的优势主要有：" class="headerlink" title="2. 它的优势主要有："></a>2. 它的优势主要有：</h5><ul><li>SVG 可被非常多的工具读取和修改（比如记事本）</li><li>SVG 与 JPEG 和 GIF 图像比起来，尺寸更小，且可压缩性更强。</li><li>SVG 是可伸缩的</li><li>SVG 图像可在任何的分辨率下被高质量地打印</li><li>SVG 可在图像质量不下降的情况下被放大</li><li>SVG 图像中的文本是可选的，同时也是可搜索的（很适合制作地图）</li><li>SVG 可以与 Java 技术一起运行</li><li>SVG 是开放的标准</li><li>SVG 文件是纯粹的 XML</li></ul><h5 id="3-支持程度："><a href="#3-支持程度：" class="headerlink" title="3. 支持程度："></a>3. 支持程度：</h5><ul><li>Internet Explorer9（IE8和早期版本都需要一个插件 - 如Adobe SVG浏览器，这是免费提供的。）</li><li>火狐</li><li>谷歌Chrome</li><li>Opera</li><li>Safari</li></ul><h5 id="4-如何创建："><a href="#4-如何创建：" class="headerlink" title="4. 如何创建："></a>4. 如何创建：</h5><ul><li>由于SVG是XML文件，SVG图像可以用任何文本编辑器创建，但它往往是与一个绘图程序一起使用，如Inkscape，更方便地创建SVG图像。</li></ul><h5 id="5-使用案例："><a href="#5-使用案例：" class="headerlink" title="5. 使用案例："></a>5. 使用案例：</h5><h6 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h6><blockquote><p>老方法</p></blockquote><pre class=" language-svg"><code class="language-svg"><span class="token prolog">&lt;?xml version="1.0" standalone="no"?></span><span class="token doctype">&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span>  <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>第一行包含了 XML 声明。请注意 standalone 属性！该属性规定此 SVG 文件是否是"独立的"，或含有对外部文件的引用。standalone="no" 意味着 SVG 文档会引用一个外部文件 - 在这里，是 DTD 文件。第二和第三行引用了这个外部的 SVG DTD。该 DTD 位于 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"。该 DTD 位于 W3C，含有所有允许的 SVG 元素。SVG 代码以 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span> 元素开始，包括开启标签 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span> 和关闭标签 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span> 。这是根元素。width 和 height 属性可设置此 SVG 文档的宽度和高度。version 属性可定义所使用的 SVG 版本，xmlns 属性可定义 SVG 命名空间。SVG 的 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span><span class="token punctuation">></span></span> 用来创建一个圆。cx 和 cy 属性定义圆中心的 x 和 y 坐标。如果忽略这两个属性，那么圆点会被设置为 (0, 0)。r 属性定义圆的半径。stroke 和 stroke-width 属性控制如何显示形状的轮廓。我们把圆的轮廓设置为 2px 宽，黑边框。fill 属性设置形状内的颜色。我们把填充颜色设置为红色。关闭标签的作用是关闭 SVG 元素和文档本身。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></code></pre><p><code>注释：所有的开启标签必须有关闭标签！</code></p><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h6><blockquote><p>直接在HTML嵌入SVG代码</p></blockquote><pre class=" language-svg"><code class="language-svg"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="6-SVG-路径"><a href="#6-SVG-路径" class="headerlink" title="6.SVG 路径"></a>6.SVG 路径</h5><blockquote><p><path> 元素应该是 SVG 中最常见的形状。你可以通过 path 元素绘制矩形（直角矩形或者圆角矩形）、圆形、椭圆、折线形、多边形，以及一些其他的形状。</path></p></blockquote><p><path> 元素用于定义一个路径。下面的命令可用于路径数据：</path></p><ul><li>M = moveto</li><li>L = lineto</li><li>H = horizontal lineto</li><li>V = vertical lineto</li><li>C = curveto</li><li>S = smooth curveto</li><li>Q = quadratic 贝塞尔 curve</li><li>T = smooth quadratic Bézier curveto</li><li>A = elliptical Arc</li><li>Z = closepath</li></ul><p><code>注意：以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。</code></p><h5 id="7-Stroke-属性"><a href="#7-Stroke-属性" class="headerlink" title="7.Stroke 属性"></a>7.Stroke 属性</h5><ul><li>stroke</li><li>stroke-width</li><li>stroke-linecap</li><li>stroke-dasharray</li></ul><p><code>所有stroke属性，可应用于任何种类的线条，文字和元素就像一个圆的轮廓。</code></p><pre class=" language-svg"><code class="language-svg"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M5 20 l215 0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M5 40 l215 0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M5 60 l215 0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="8-文本"><a href="#8-文本" class="headerlink" title="8.文本"></a>8.文本</h5><ul><li>&lt;text&gt; 元素用于定义文本。</li></ul><h5 id="9-最后演示一个文本描边重绘的案例"><a href="#9-最后演示一个文本描边重绘的案例" class="headerlink" title="9.最后演示一个文本描边重绘的案例"></a>9.最后演示一个文本描边重绘的案例</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector"><span class="token class">.texthjh</span></span><span class="token punctuation">{</span>                <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>                <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>                <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>                <span class="token property">fill</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>                <span class="token property">stroke-width</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>                <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> <span class="token number">90</span> <span class="token number">310</span><span class="token punctuation">;</span>                <span class="token property">animation</span><span class="token punctuation">:</span> stroke <span class="token number">10</span>s infinite linear<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.texthjh-1</span></span><span class="token punctuation">{</span>                <span class="token property">stroke</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                <span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span>px <span class="token hexcode">#3498db</span><span class="token punctuation">;</span>                <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token number">1.5</span>s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.texthjh-2</span></span><span class="token punctuation">{</span>                <span class="token property">stroke</span><span class="token punctuation">:</span> <span class="token hexcode">#f39c12</span><span class="token punctuation">;</span>                <span class="token property">animation-delay</span><span class="token punctuation">:</span> -<span class="token number">3</span>s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.texthjh-3</span></span><span class="token punctuation">{</span>                <span class="token property">stroke</span><span class="token punctuation">:</span> <span class="token hexcode">#e74c3c</span><span class="token punctuation">;</span>                <span class="token property">animation-delay</span><span class="token punctuation">:</span> -<span class="token number">4.5</span>s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.texthjh-4</span></span><span class="token punctuation">{</span>                <span class="token property">stroke</span><span class="token punctuation">:</span> <span class="token hexcode">#9b59b6</span><span class="token punctuation">;</span>                <span class="token property">animation-delay</span><span class="token punctuation">:</span> -<span class="token number">6</span>s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.texthjh-5</span></span><span class="token punctuation">{</span>                <span class="token property">stroke</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                <span class="token property">animation-delay</span><span class="token punctuation">:</span> -<span class="token number">1.5</span>s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token atrule"><span class="token rule">@keyframes</span> stroke</span> <span class="token punctuation">{</span>              <span class="token selector">100% </span><span class="token punctuation">{</span>                <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> -<span class="token number">400</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">text-anchor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>texthjh texthjh-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                三 叶 雨            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">text-anchor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>texthjh texthjh-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                三 叶 雨            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">text-anchor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>texthjh texthjh-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            三 叶 雨            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">text-anchor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>texthjh texthjh-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                三 叶 雨            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">text-anchor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>texthjh texthjh-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                三 叶 雨            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>实现效果如下：</p><p><img src="/medias/le/svg.gif" alt="SVG多重文字重绘"></p>]]></content>
      
      
      <categories>
          
          <category> SVG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVG </tag>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-router</title>
      <link href="/2017/02/06/vue-router/"/>
      <url>/2017/02/06/vue-router/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2></li></ul><blockquote><ol><li>需要导入vue模块<br>import Vue from ‘vue’<br>需要导入vue-router模块<br>import VueRouter from ‘vue-router’</li></ol></blockquote><blockquote><ol start="2"><li>导入页面组件</li></ol></blockquote><blockquote><ol start="3"><li>vueRouter是vue的一个插件<br>需要注册插件才能使用<br>Vue.use(VueRouter)</li></ol></blockquote><blockquote><ol start="4"><li>hash模式 mode: ‘hash’<br>hash模式在路径后面加上#/ 这样浏览器会认为#后面是锚点 不是重新请求新的页面</li></ol></blockquote><blockquote><ol start="5"><li>history 通过浏览器的历史记录来 切换路由<br>history 它只能支持 现代浏览器<br>vue会自动降级处理 当 history 不支持的时候会制动使用hash模式<br>谁的子路由 就在谁的组件里切换</li></ol></blockquote><hr><p>$route 用来（获取）当前页面的路由信息</p><p>$router 用来处理路由（跳转）的方法集合</p><pre class=" language-javascript"><code class="language-javascript">$router中常用的方法<span class="token comment" spellcheck="true">//this.$route这个对象用于获取路由的参数数据</span><span class="token number">1</span><span class="token punctuation">.</span>push 跳转到某个页面 会添加历史记录（因为有历史记录所以可以调用$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法返回到上一步）<span class="token number">2</span><span class="token punctuation">.</span>replace 也可以跳转到某个页面 但是不会记录历史（因为没有历史记录调用$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法时不会返回到当前的一步而是会跳转到其他页面）<span class="token number">3</span><span class="token punctuation">.</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回上一个页面<span class="token comment" spellcheck="true">// 如果你要使用router 传递参数到目标页面</span><span class="token comment" spellcheck="true">// 除了使用动态参数以外</span><span class="token comment" spellcheck="true">// 还可以使用以下的query方式传参 查询字符串参数</span><span class="token comment" spellcheck="true">// 要使用query 传递查询字符串必须和path一起使用</span><span class="token comment" spellcheck="true">// this.$router.push({</span><span class="token comment" spellcheck="true">//     path: '/goods/type1/nz2.html',</span><span class="token comment" spellcheck="true">//     query: {</span><span class="token comment" spellcheck="true">//         xx: 100</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// 要直接传递路径参数的方式跳转</span><span class="token comment" spellcheck="true">// 必须给当前要跳转的路由路径 取一个name 名称</span><span class="token comment" spellcheck="true">// 然后在配合 params 跳转路径</span><span class="token comment" spellcheck="true">// this.$router.push('/goods/type1/nz2.html')</span><span class="token comment" spellcheck="true">// 在push的使用要使用 params传递路径参数 必须配合 路由路径的name属性来使用</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> <span class="token string">'GoodsDetail'</span><span class="token punctuation">,</span>                    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        type<span class="token punctuation">:</span> <span class="token string">'type1'</span><span class="token punctuation">,</span>                        sid<span class="token punctuation">:</span> <span class="token string">'nz2.html'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    query<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 还可以附加 查询字符串参数</span>                        a<span class="token punctuation">:</span> <span class="token number">100</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span> 类似a标签用于链接跳转<span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token function">用来作为一个跳转的容器</span><span class="token punctuation">(</span>如果要想在那个页面中跳转就必须在哪个页面写容器<span class="token punctuation">)</span>谁的子路由 就在谁的组件里切换</code></pre><hr><pre class=" language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// watch可以监听实例里所有成员的变化</span>        <span class="token comment" spellcheck="true">// 这个路由参数 在第一次加载的时候是检测不了路由的变化的</span>            <span class="token function">$route</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// console.log(v)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> v<span class="token punctuation">.</span>params<span class="token punctuation">.</span>newsid                <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> v<span class="token punctuation">.</span>params<span class="token punctuation">.</span>newsid <span class="token operator">+</span> <span class="token string">'标题'</span>                <span class="token comment" spellcheck="true">// 还可以通过这个新闻id 去后台ajax请求新闻的数据来显示不同的内容</span>                <span class="token comment" spellcheck="true">// 在路径上传递的query参数可以使用$route对象的query属性来获取</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//页面实例化好后执行这个钩子</span>            <span class="token comment" spellcheck="true">// 这个路由参数 在第一次加载的时候是检测不了路由的变化的</span>            <span class="token comment" spellcheck="true">// 第一次加载的路由数据需要通过 vue的生命周期函数函数来获取</span>            <span class="token comment" spellcheck="true">// 预加载</span>            <span class="token comment" spellcheck="true">// $route 用来获取当前页面的路由信息</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>newsid            <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>newsid <span class="token operator">+</span> <span class="token string">'标题'</span>            <span class="token comment" spellcheck="true">// $router 用来处理路由跳转的方法集合</span>            <span class="token comment" spellcheck="true">// console.log(this.$route)</span>            <span class="token comment" spellcheck="true">// console.log(this.$router)</span>        <span class="token punctuation">}</span> </code></pre><pre class=" language-javascript"><code class="language-javascript">导出 <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//路由的处理模式</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token comment" spellcheck="true">// 路由的匹配规则</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一个对象就是一个匹配规则</span>            <span class="token comment" spellcheck="true">// 要匹配的路径</span>            path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// http://localhost/</span>            component<span class="token punctuation">:</span> Index <span class="token comment" spellcheck="true">//给匹配到的路径提供一个组件</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/news'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> News<span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//子路由</span>                <span class="token punctuation">{</span>                    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>                    component<span class="token punctuation">:</span> NewsList                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    path<span class="token punctuation">:</span> <span class="token string">':newsid'</span><span class="token punctuation">,</span>                    component<span class="token punctuation">:</span> Detail                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> Login        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/404'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//匹配任意路径</span>            component<span class="token punctuation">:</span> NotFound        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>            redirect<span class="token punctuation">:</span> <span class="token string">'/404'</span> <span class="token comment" spellcheck="true">//重定向处理</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><ol start="6"><li>要在hash模式和history模式间 兼容的话必须使用router-link to=””<br>不能使用a标签(a标签在histor模式下支持，但有些浏览器不支持history模式)</li></ol></blockquote><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><h3 id="keep-alive-缓存当前的状态"><a href="#keep-alive-缓存当前的状态" class="headerlink" title="keep-alive(缓存当前的状态)"></a>keep-alive(缓存当前的状态)</h3><pre class=" language-javascript"><code class="language-javascript">单页面跳转时使用keep<span class="token operator">-</span>alive标签包裹想要缓存的元素上时，返回后那个数据将保持不变</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见arcgis崩溃的解决方法</title>
      <link href="/2017/01/12/chang-jian-arcgis-beng-kui-de-jie-jue-fang-fa/"/>
      <url>/2017/01/12/chang-jian-arcgis-beng-kui-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/arcgis/arcgis.jpg" alt="Arcgis作业"></p><p><code style="red">以下情况均是电脑在其它软件运行流畅和电脑配置足够的情况下</code></p><blockquote><p>相信用过arcgis的朋友们都会因为以下arcgis软件的容易强制关闭而苦恼，也许安装的一开始还是好的，但是用着用着就会发送错误报告或者崩溃卡死的状况<code style="red">注意：您不要以为试图重装系统或软件就能解决问题，然而并不可以这是软件自身不稳定造成的。</code>，很多时候很多人都记不得画完一个片区就保存，导致辛辛苦苦画的就发送错误报告功亏一篑了，还是提醒一下用arcgis的朋友们还是记得边画边保存，因为毕竟是破解版的软件加上电脑系统的兼容性不好容易导致电脑崩溃，下面是一些我自己的解决方法因为系统和电脑的厂商可能不同可能不一定适用，不过能解决我遇到过的最大问题，相信能对你们有所帮助。</p></blockquote><p><img src="/medias/arcgis/arcgis2.png" alt="发送错误报告"></p><h3 id="1-还原系统的初始配置"><a href="#1-还原系统的初始配置" class="headerlink" title="1.还原系统的初始配置"></a>1.还原系统的初始配置</h3><blockquote><p>在ArcMap中工具栏配置的所有用户首选项都存储在一个名为<code>Normal.mxt</code>的特殊文件中。这是很有用的，因为它允许用户安装ArcMap，只拥有他们所需的工具栏，以及为了方便使用和熟悉而需要它们的位置。ArcMap在启动过程中加载这些设置。但是，在某些情况下，Normal.mxt可能会损坏。如果发生这种情况，则无法打开Normal.mxt，因此ArcMap无法启动并崩溃。</p></blockquote><p>解决方法</p><pre class=" language-text"><code class="language-text">可以测试是否正导致ArcMap崩溃的是Normal.mxt。这是通过将Normal.mxt重命名为old_Normal.mxt来完成的，它可以在以下位置找到并重新命名即可，当arcgis再次启动是会重新生成，但相应的如之前配置如键盘的快捷分配将要重新配置：<code>C:\用户\username\Application Data\ESRI\Desktop10.x\ArcMap\Templates</code></pre><h3 id="2-以管理员身份运行"><a href="#2-以管理员身份运行" class="headerlink" title="2.以管理员身份运行"></a>2.以管理员身份运行</h3><blockquote><p>如果软件双击打开和打开以后出现停止运行的情况，大多数情况是未获得管理员的最高权限因为很多插件之类的都要用到管理员的最高权限才可以运行，所以可能打不开或者是打开后出现其他问题。</p></blockquote><h3 id="3-确保您的显卡驱动程序是最新的。"><a href="#3-确保您的显卡驱动程序是最新的。" class="headerlink" title="3.确保您的显卡驱动程序是最新的。"></a>3.确保您的显卡驱动程序是最新的。</h3><blockquote><p>过时的图形卡驱动程序是软件在初始化时崩溃或挂起的另一个常见原因。ArcGIS桌面win10系统的要求是，机器必须至少有64 MB的RAM，有一个24位的图形加速器，并且具有OpenGL v2.0或更高版本。您也可以查看自己的显卡制造商到相应的网站更新图形卡驱动程序:</p></blockquote><p>AMD: <a href="http://support.amd.com/us/gpudownload/windows/Pages/auto_detect.aspx" target="_blank" rel="noopener">http://support.amd.com/us/gpudownload/windows/Pages/auto_detect.aspx</a></p><p>NVIDIA: <a href="http://www.nvidia.com/Download/Scan.aspx?lang=en-us" target="_blank" rel="noopener">http://www.nvidia.com/Download/Scan.aspx?lang=en-us</a></p><p>Intel: <a href="http://www.intel.com/p/en_US/support/detect" target="_blank" rel="noopener">http://www.intel.com/p/en_US/support/detect</a></p><p><code style="red"> 或者也可以右键点击电脑--->属性进入到以下页面进行更新驱动：</code></p><p><img src="/medias/arcgis/1.png" alt="设备管理器"></p><h3 id="4-以兼容性运行这个程序"><a href="#4-以兼容性运行这个程序" class="headerlink" title="4. 以兼容性运行这个程序"></a>4. 以兼容性运行这个程序</h3><blockquote><p>选中该软件右键点击—-&gt;选择以兼容性运行该程序</p></blockquote><p><img src="/medias/arcgis/2.png" alt="属性"></p><p> 以上是自己遇到并解决问题的一些方法，修改完以上的一些问题后记得重新启动计算机，如果上面的方法解决了您的问题，下次再出现用同样方法解决即可。</p>]]></content>
      
      
      <categories>
          
          <category> ArcGis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArcGis </tag>
            
            <tag> 解决ArcGis崩溃方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueX</title>
      <link href="/2017/01/04/vux/"/>
      <url>/2017/01/04/vux/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/featureimages/vue.png" alt="vuex"></p><h1 id="Vuex-管理器"><a href="#Vuex-管理器" class="headerlink" title="Vuex(管理器)"></a>Vuex(管理器)</h1><ol><li>state 仓库的原始数据 {}</li><li>getters 查询器集合 {} 里面包含查询器方法</li><li>mutations 修改器集合{} 里面包含修改方法</li></ol><hr><h5 id="1-在store的index-js中配置"><a href="#1-在store的index-js中配置" class="headerlink" title="1.在store的index.js中配置"></a>1.在store的index.js中配置</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">// 注册vuex 插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 从本地存储里取出来的</span><span class="token comment" spellcheck="true">//LocalStorage(本地储存) 刷新页面本地储存不会被清空</span><span class="token comment" spellcheck="true">// SessionStorage(本地存储)刷新页面本地储存会被清空</span><span class="token keyword">const</span> user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">unescape</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建一个仓库</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> user    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//不可以改变原始数据</span>    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">user</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>user        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//可以改变原始数据</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">CHANGE_USER</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token function">escape</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            state<span class="token punctuation">.</span>user <span class="token operator">=</span> data        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">LOG_OUT</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>            state<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><hr><h5 id="2-main-js中配置"><a href="#2-main-js中配置" class="headerlink" title="2. main.js中配置"></a>2. main.js中配置</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// The Vue build version to load with the `import` command</span><span class="token comment" spellcheck="true">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token comment" spellcheck="true">// 导入iview</span><span class="token keyword">import</span> iview <span class="token keyword">from</span> <span class="token string">'iview'</span><span class="token comment" spellcheck="true">// 导入iview的样式</span><span class="token keyword">import</span> <span class="token string">'iview/dist/styles/iview.css'</span><span class="token comment" spellcheck="true">// 注册iview插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>iview<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>auth<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 加入路由</span>  store<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 加入vuex</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// import plugin from './plugin'</span><span class="token comment" spellcheck="true">// console.log(plugin)</span><span class="token comment" spellcheck="true">// Vue.use(plugin)</span><span class="token comment" spellcheck="true">// Vue.useing = function(plugin, ...args) {</span><span class="token comment" spellcheck="true">//   plugin.install(Vue, ...args)</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// Vue.useing(plugin, 1, 2 ,3 ,5 )</span><span class="token comment" spellcheck="true">/** * Vue的插件 必须是一个对象 * 对象里面必须包含一个install方法 * install(Vue, options) * 1. Vue 就是当前Vue的类 * 2. options 对象 这个是使用插件时传递的配置参数（这个插件要有配置参数） */</span><span class="token comment" spellcheck="true">// const plugin = {</span><span class="token comment" spellcheck="true">//   install(Vue, options) {</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">// }</span></code></pre><hr><h5 id="3-在组件中混入vuex的辅助函数"><a href="#3-在组件中混入vuex的辅助函数" class="headerlink" title="3. 在组件中混入vuex的辅助函数"></a>3. 在组件中混入vuex的辅助函数</h5><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span> mapGetters<span class="token punctuation">,</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>    混入原理解析    <span class="token comment" spellcheck="true">// function mapGetters(arr) {</span>    <span class="token comment" spellcheck="true">//     const obj = {}</span>    <span class="token comment" spellcheck="true">//     arr.forEach(k => {</span>    <span class="token comment" spellcheck="true">//         obj[k] = function() {</span>    <span class="token comment" spellcheck="true">//             return this.$store.getters[k]</span>    <span class="token comment" spellcheck="true">//         }</span>    <span class="token comment" spellcheck="true">//     })</span>    <span class="token comment" spellcheck="true">//     return obj</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// function mapMutations(arr) {</span>    <span class="token comment" spellcheck="true">//     const obj = {}</span>    <span class="token comment" spellcheck="true">//     arr.forEach(k => {</span>    <span class="token comment" spellcheck="true">//         obj[k] = function(val) {</span>    <span class="token comment" spellcheck="true">//             return this.$store.commit(k, val)</span>    <span class="token comment" spellcheck="true">//         }</span>    <span class="token comment" spellcheck="true">//     })</span>    <span class="token comment" spellcheck="true">//     return obj</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        props<span class="token punctuation">:</span> <span class="token punctuation">{</span>            logo<span class="token punctuation">:</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>                <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'后台管理系统'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            dropdownMenu<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>            avatar<span class="token punctuation">:</span> String        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string">'user'</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span> methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment" spellcheck="true">//...表示合并对象然后混入</span>                <span class="token string">'LOG_OUT'</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">LOG_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><blockquote><p>辅助函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span><span class="token function">mapMutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>放在方法methods<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>放在compute</code></pre></blockquote><blockquote><p>base64(前端加密)</p></blockquote><blockquote><p>LocalStorage(本地储存) 刷新页面本地储存不会被清空</p></blockquote><blockquote><p>SessionStorage(本地存储)刷新页面本地储存会被清空</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuex </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS全览</title>
      <link href="/2017/01/02/js-quan-lan/"/>
      <url>/2017/01/02/js-quan-lan/</url>
      
        <content type="html"><![CDATA[<h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a><code>1.变量</code></h4><p><img src="/medias/jss/%E5%8F%98%E9%87%8F.gif" alt="变量"></p><h4 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a><code>2.数据类型</code></h4><p><img src="/medias/jss/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.gif" alt="数据类型"></p><h4 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a><code>3.字符串</code></h4><p><img src="/medias/jss/%E5%AD%97%E7%AC%A6%E4%B8%B2.gif" alt="字符串"></p><h4 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a><code>4.数组</code></h4><p><img src="/medias/jss/js%E6%95%B0%E7%BB%84.gif" alt="数组"></p><h4 id="5-函数"><a href="#5-函数" class="headerlink" title="5.函数"></a><code>5.函数</code></h4><p><img src="/medias/jss/%E5%87%BD%E6%95%B0.gif" alt="函数"></p><h4 id="6-流程控制语句"><a href="#6-流程控制语句" class="headerlink" title="6.流程控制语句"></a><code>6.流程控制语句</code></h4><p><img src="/medias/jss/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5.gif" alt="流程控制语句"></p><h4 id="7-运算符"><a href="#7-运算符" class="headerlink" title="7.运算符"></a><code>7.运算符</code></h4><p><img src="/medias/jss/%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="运算符"></p><h4 id="8-正则表达式"><a href="#8-正则表达式" class="headerlink" title="8.正则表达式"></a><code>8.正则表达式</code></h4><p><img src="/medias/jss/%E6%AD%A3%E5%88%99.gif" alt="正则表达式"></p><h4 id="9-Dom"><a href="#9-Dom" class="headerlink" title="9.Dom"></a><code>9.Dom</code></h4><p><img src="/medias/jss/dom.gif" alt="Dom"></p><h4 id="10-window对象"><a href="#10-window对象" class="headerlink" title="10.window对象"></a><code>10.window对象</code></h4><p><img src="/medias/jss/window%E5%AF%B9%E8%B1%A1.gif" alt="window对象"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 全览 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
